{"version":3,"file":"browser.js","sources":["../../src/account.ts","../../src/utils.ts","../../src/network-client.ts","../../src/constants.ts","../../src/function-key-provider.ts","../../src/offline-key-provider.ts","../../src/record-provider.ts","../../src/program-manager.ts","../../src/browser.ts"],"sourcesContent":["import {\n  Address,\n  ComputeKey,\n  EncryptionToolkit,\n  Field,\n  Group,\n  PrivateKey,\n  Transition,\n  Signature,\n  ViewKey,\n  PrivateKeyCiphertext,\n  RecordCiphertext,\n  RecordPlaintext,\n} from \"./wasm.js\";\n\ninterface AccountParam {\n  privateKey?: string;\n  seed?: Uint8Array;\n}\n\n/**\n * Key Management class. Enables the creation of a new Aleo Account, importation of an existing account from\n * an existing private key or seed, and message signing and verification functionality. An Aleo Account is generated\n * from a randomly generated seed (number) from which an account private key, view key, and a public account address are\n * derived. The private key lies at the root of an Aleo account. It is a highly sensitive secret and should be protected\n * as it allows for creation of Aleo Program executions and arbitrary value transfers. The View Key allows for decryption\n * of a user's activity on the blockchain. The Address is the public address to which other users of Aleo can send Aleo\n * credits and other records to. This class should only be used in environments where the safety of the underlying key\n * material can be assured.\n *\n * @example\n * import { Account } from \"@provablehq/sdk/testnet.js\";\n *\n * // Create a new account\n * const myRandomAccount = new Account();\n *\n * // Create an account from a randomly generated seed\n * const seed = new Uint8Array([94, 91, 52, 251, 240, 230, 226, 35, 117, 253, 224, 210, 175, 13, 205, 120, 155, 214, 7, 169, 66, 62, 206, 50, 188, 40, 29, 122, 40, 250, 54, 18]);\n * const mySeededAccount = new Account({seed: seed});\n *\n * // Create an account from an existing private key\n * const myExistingAccount = new Account({privateKey: process.env.privateKey});\n *\n * // Sign a message\n * const hello_world = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100]);\n * const signature = myRandomAccount.sign(hello_world);\n *\n * // Verify a signature\n * assert(myRandomAccount.verify(hello_world, signature));\n */\nexport class Account {\n  _privateKey: PrivateKey;\n  _viewKey: ViewKey;\n  _computeKey: ComputeKey;\n  _address: Address;\n\n  constructor(params: AccountParam = {}) {\n    try {\n      this._privateKey = this.privateKeyFromParams(params);\n    } catch (e) {\n      console.error(\"Wrong parameter\", e);\n      throw new Error(\"Wrong Parameter\");\n    }\n    this._viewKey = ViewKey.from_private_key(this._privateKey);\n    this._computeKey = ComputeKey.from_private_key(this._privateKey);\n    this._address = Address.from_private_key(this._privateKey);\n  }\n\n  /**\n   * Attempts to create an account from a private key ciphertext\n   * @param {PrivateKeyCiphertext | string} ciphertext The encrypted private key ciphertext or its string representation\n   * @param {string} password The password used to decrypt the private key ciphertext\n   * @returns {Account} A new Account instance created from the decrypted private key\n   *\n   * @example\n   * import { Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * // Create an account object from a previously encrypted ciphertext and password.\n   * const account = Account.fromCiphertext(process.env.ciphertext, process.env.password);\n   */\n  public static fromCiphertext(ciphertext: PrivateKeyCiphertext | string, password: string): Account {\n    try {\n      ciphertext = (typeof ciphertext === \"string\") ? PrivateKeyCiphertext.fromString(ciphertext) : ciphertext;\n      const _privateKey = PrivateKey.fromPrivateKeyCiphertext(ciphertext, password);\n      return new Account({ privateKey: _privateKey.to_string() });\n    } catch(e) {\n      throw new Error(\"Wrong password or invalid ciphertext\");\n    }\n  }\n\n  /**\n   * Creates a PrivateKey from the provided parameters.\n   * @param {AccountParam} params The parameters containing either a private key string or a seed\n   * @returns {PrivateKey} A PrivateKey instance derived from the provided parameters\n   */\n  private privateKeyFromParams(params: AccountParam): PrivateKey {\n    if (params.seed) {\n      return PrivateKey.from_seed_unchecked(params.seed);\n    }\n    if (params.privateKey) {\n      return PrivateKey.from_string(params.privateKey);\n    }\n    return new PrivateKey();\n  }\n\n  /**\n   * Returns the PrivateKey associated with the account.\n   * @returns {PrivateKey} The private key of the account\n   *\n   * @example\n   * import { Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * const account = new Account();\n   * const privateKey = account.privateKey();\n   */\n  privateKey(): PrivateKey {\n    return this._privateKey;\n  }\n\n  /**\n   * Returns the ViewKey associated with the account.\n   * @returns {ViewKey} The view key of the account\n   *\n   * @example\n   * import { Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * const account = new Account();\n   * const viewKey = account.viewKey();\n   */\n  viewKey(): ViewKey {\n    return this._viewKey;\n  }\n\n  /**\n   * Returns the ComputeKey associated with the account.\n   * @returns {ComputeKey} The compute key of the account\n   *\n   * @example\n   * import { Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * const account = new Account();\n   * const computeKey = account.computeKey();\n   */\n  computeKey(): ComputeKey {\n    return this._computeKey;\n  }\n\n  /**\n   * Returns the Aleo address associated with the account.\n   * @returns {Address} The public address of the account\n   *\n   * @example\n   * import { Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * const account = new Account();\n   * const address = account.address();\n   */\n  address(): Address {\n    return this._address;\n  }\n\n  /**\n   * Deep clones the Account.\n   * @returns {Account} A new Account instance with the same private key\n   *\n   * @example\n   * import { Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * const account = new Account();\n   * const clonedAccount = account.clone();\n   */\n  clone(): Account {\n    return new Account({ privateKey: this._privateKey.to_string() });\n  }\n\n  /**\n   * Returns the address of the account in a string representation.\n   *\n   * @returns {string} The string representation of the account address\n   */\n  toString(): string {\n    return this.address().to_string()\n  }\n\n  /**\n   * Encrypts the account's private key with a password.\n   *\n   * @param {string} password Password to encrypt the private key.\n   * @returns {PrivateKeyCiphertext} The encrypted private key ciphertext\n   *\n   * @example\n   * import { Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * const account = new Account();\n   * const ciphertext = account.encryptAccount(\"password\");\n   * process.env.ciphertext = ciphertext.toString();\n   */\n  encryptAccount(password: string): PrivateKeyCiphertext {\n    return this._privateKey.toCiphertext(password);\n  }\n\n  /**\n   * Decrypts an encrypted record string into a plaintext record object.\n   *\n   * @param {string} ciphertext A string representing the ciphertext of a record.\n   * @returns {RecordPlaintext} The decrypted record plaintext\n   *\n   * @example\n   * // Import the AleoNetworkClient and Account classes\n   * import { AleoNetworkClient, Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * // Create a connection to the Aleo network and an account\n   * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n   * const account = Account.fromCiphertext(process.env.ciphertext!, process.env.password!);\n   *\n   * // Get the record ciphertexts from a transaction.\n   * const transaction = await networkClient.getTransactionObject(\"at1fjy6s9md2v4rgcn3j3q4qndtfaa2zvg58a4uha0rujvrn4cumu9qfazxdd\");\n   * const records = transaction.records();\n   *\n   * // Decrypt any records the account owns.\n   * const decryptedRecords = [];\n   * for (const record of records) {\n   *    if (account.decryptRecord(record)) {\n   *      decryptedRecords.push(record);\n   *    }\n   * }\n   */\n  decryptRecord(ciphertext: string): RecordPlaintext {\n    return this._viewKey.decrypt(ciphertext);\n  }\n\n  /**\n   * Decrypts an array of Record ciphertext strings into an array of record plaintext objects.\n   *\n   * @param {string[]} ciphertexts An array of strings representing the ciphertexts of records.\n   * @returns {RecordPlaintext[]} An array of decrypted record plaintexts\n   *\n   * @example\n   * // Import the AleoNetworkClient and Account classes\n   * import { AleoNetworkClient, Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * // Create a connection to the Aleo network and an account\n   * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n   * const account = Account.fromCiphertext(process.env.ciphertext!, process.env.password!);\n   *\n   * // Get the record ciphertexts from a transaction.\n   * const transaction = await networkClient.getTransactionObject(\"at1fjy6s9md2v4rgcn3j3q4qndtfaa2zvg58a4uha0rujvrn4cumu9qfazxdd\");\n   * const records = transaction.records();\n   *\n   * // Decrypt any records the account owns. If the account owns no records, the array will be empty.\n   * const decryptedRecords = account.decryptRecords(records);\n   */\n  decryptRecords(ciphertexts: string[]): RecordPlaintext[] {\n    return ciphertexts.map((ciphertext) => this._viewKey.decrypt(ciphertext));\n  }\n\n  /**\n   * Generates a record view key from the account owner's view key and the record ciphertext.\n   * This key can be used to decrypt the record without revealing the account's view key.\n   * @param {RecordCiphertext | string} recordCiphertext The record ciphertext to generate the view key for\n   * @returns {Field} The record view key\n   * \n   * @example\n   * // Import the Account class\n   * import { Account } from \"@provablehq/sdk/testnet.js\";\n   * \n   * // Create an account object from a previously encrypted ciphertext and password.\n   * const account = Account.fromCiphertext(process.env.ciphertext!, process.env.password!);\n   * \n   * // Generate a record view key from the account's view key and a record ciphertext\n   * const recordCiphertext = RecordCiphertext.fromString(\"your_record_ciphertext_here\");\n   * const recordViewKey = account.generateRecordViewKey(recordCiphertext);\n   */\n  generateRecordViewKey(recordCiphertext: RecordCiphertext | string): Field {\n    if (typeof recordCiphertext === 'string') {\n      recordCiphertext = RecordCiphertext.fromString(recordCiphertext);\n    }\n    if (!(recordCiphertext.isOwner(this._viewKey))) {\n      throw new Error(\"The record ciphertext does not belong to this account\");\n    }\n    return EncryptionToolkit.generateRecordViewKey(this._viewKey, recordCiphertext);\n  }\n\n  /**\n   * Generates a transition view key from the account owner's view key and the transition public key.\n   * This key can be used to decrypt the private inputs and outputs of a the transition without \n   * revealing the account's view key.\n   * @param {string | Group} tpk The transition public key\n   * @returns {Field} The transition view key\n   * \n   * @example\n   * // Import the Account class\n   * import { Account } from \"@provablehq/sdk/testnet.js\";\n   * \n   * // Generate a transition view key from the account's view key and a transition public key\n   * const tpk = Group.fromString(\"your_transition_public_key_here\");\n   * \n   * const transitionViewKey = account.generateTransitionViewKey(tpk);\n   */\n  generateTransitionViewKey(tpk: string | Group): Field {\n    if (typeof tpk === 'string') {\n      tpk = Group.fromString(tpk);\n    }\n    return EncryptionToolkit.generateTvk(this._viewKey, tpk);\n  }\n\n  /**\n   * Determines whether the account owns a ciphertext record.\n   * @param {RecordCiphertext | string} ciphertext The record ciphertext to check ownership of\n   * @returns {boolean} True if the account owns the record, false otherwise\n   *\n   * @example\n   * // Import the AleoNetworkClient and Account classes\n   * import { AleoNetworkClient, Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * // Create a connection to the Aleo network and an account\n   * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n   * const account = Account.fromCiphertext(process.env.ciphertext!, process.env.password!);\n   *\n   * // Get the record ciphertexts from a transaction and check ownership of them.\n   * const transaction = await networkClient.getTransactionObject(\"at1fjy6s9md2v4rgcn3j3q4qndtfaa2zvg58a4uha0rujvrn4cumu9qfazxdd\");\n   * const records = transaction.records();\n   *\n   * // Check if the account owns any of the record ciphertexts present in the transaction.\n   * const ownedRecords = [];\n   * for (const record of records) {\n   *    if (account.ownsRecordCiphertext(record)) {\n   *      ownedRecords.push(record);\n   *    }\n   * }\n   */\n  ownsRecordCiphertext(ciphertext: RecordCiphertext | string): boolean {\n    if (typeof ciphertext === 'string') {\n      try {\n        const ciphertextObject = RecordCiphertext.fromString(ciphertext);\n        return ciphertextObject.isOwner(this._viewKey);\n      }\n      catch (e) {\n        return false;\n      }\n    }\n    else {\n      return ciphertext.isOwner(this._viewKey);\n    }\n  }\n\n  /**\n   * Signs a message with the account's private key.\n   * Returns a Signature.\n   *\n   * @param {Uint8Array} message Message to be signed.\n   * @returns {Signature} Signature over the message in bytes.\n   *\n   * @example\n   * // Import the Account class\n   * import { Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * // Create a connection to the Aleo network and an account\n   * const account = Account.fromCiphertext(process.env.ciphertext, process.env.password);\n   *\n   * // Create an account and a message to sign.\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * const signature = account.sign(message);\n   *\n   * // Verify the signature.\n   * assert(account.verify(message, signature));\n   */\n  sign(message: Uint8Array): Signature {\n    return this._privateKey.sign(message);\n  }\n\n  /**\n   * Verifies the Signature on a message.\n   *\n   * @param {Uint8Array} message Message in bytes to be signed.\n   * @param {Signature} signature Signature to be verified.\n   * @returns {boolean} True if the signature is valid, false otherwise.\n   *\n   * @example\n   * // Import the Account class\n   * import { Account } from \"@provablehq/sdk/testnet.js\";\n   *\n   * // Create a connection to the Aleo network and an account\n   * const account = Account.fromCiphertext(process.env.ciphertext, process.env.password);\n   *\n   * // Sign a message.\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * const signature = account.sign(message);\n   *\n   * // Verify the signature.\n   * assert(account.verify(message, signature));\n   */\n  verify(message: Uint8Array, signature: Signature): boolean {\n    return this._address.verify(message, signature);\n  }\n}\n","function detectBrowser() {\n    const userAgent = navigator.userAgent;\n\n    if (/chrome|crios|crmo/i.test(userAgent) && !/edge|edg|opr/i.test(userAgent)) {\n        return \"chrome\";\n    } else if (/firefox|fxios/i.test(userAgent)) {\n        return \"firefox\";\n    } else if (/safari/i.test(userAgent) && !/chrome|crios|crmo|android/i.test(userAgent)) {\n        return \"safari\";\n    } else if (/edg/i.test(userAgent)) {\n        return \"edge\";\n    } else if (/opr\\//i.test(userAgent)) {\n        return \"opera\";\n    } else {\n        return \"browser\";\n    }\n}\n\nexport function environment() {\n    if ((typeof process !== 'undefined') &&\n        (process.release?.name === 'node')) {\n        return 'node';\n    } else if (typeof window !== 'undefined') {\n        return detectBrowser();\n    } else {\n        return 'unknown';\n    }\n}\n\nexport function logAndThrow(message: string): never {\n    console.error(message);\n    throw new Error(message);\n}\n\nexport function parseJSON(json: string): any {\n    function revive(key: string, value: any, context: any) {\n        if (Number.isInteger(value)) {\n            return BigInt(context.source);\n        } else {\n            return value;\n        }\n    }\n\n    return JSON.parse(json, revive as any);\n}\n\nexport async function get(url: URL | string, options?: RequestInit) {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n\ntype RetryOptions = {\n    maxAttempts?: number;\n    baseDelay?: number;\n    jitter?: number;\n    retryOnStatus?: number[]; // e.g. [500, 502, 503]\n    shouldRetry?: (err: any) => boolean;\n};\n\nexport async function retryWithBackoff<T>(\n    fn: () => Promise<T>,\n    {\n        maxAttempts = 5,\n        baseDelay = 100,\n        jitter,\n        retryOnStatus = [],\n        shouldRetry,\n    }: RetryOptions = {},\n): Promise<T> {\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n        try {\n            return await fn();\n        } catch (err: any) {\n            const isLast = attempt === maxAttempts;\n            const error = err as Error & { code?: string; status?: number };\n\n            let retryable = false;\n\n            if (typeof error.status === \"number\") {\n                if (error.status >= 500) {\n                    retryable = true;\n                } else if (error.status >= 400 && shouldRetry) {\n                    retryable = shouldRetry(error);\n                }\n            } else if (shouldRetry) {\n                retryable = shouldRetry(error);\n            }\n\n            if (!retryable || isLast) throw error;\n\n            const jitterAmount = jitter ?? baseDelay;\n            const actualJitter = Math.floor(Math.random() * jitterAmount);\n            const delay = baseDelay * 2 ** (attempt - 1) + actualJitter;\n            console.warn(\n                `Retry ${attempt}/${maxAttempts} failed. Retrying in ${delay}ms...`,\n            );\n\n            await new Promise((res) => setTimeout(res, delay));\n        }\n    }\n\n    throw new Error(\"retryWithBackoff: unreachable\");\n}\n","import { get, post, parseJSON, logAndThrow, retryWithBackoff, environment } from \"./utils.js\";\nimport { Account } from \"./account.js\";\nimport { BlockJSON } from \"./models/blockJSON.js\";\nimport { TransactionJSON } from \"./models/transaction/transactionJSON.js\";\nimport {\n    Address,\n    Plaintext,\n    RecordCiphertext,\n    Program,\n    ProvingRequest,\n    RecordPlaintext,\n    PrivateKey,\n    Transaction,\n} from \"./wasm.js\";\nimport { ConfirmedTransactionJSON } from \"./models/confirmed_transaction.js\";\nimport { ProvingResponse } from \"./models/provingResponse.js\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\ninterface AleoNetworkClientOptions {\n    headers?: { [key: string]: string };\n}\n\n/**\n * Options for submitting a proving request.\n *\n * @property provingRequest {ProvingRequest | string} The proving request being submitted to the network.\n * @property url {string} The URL of the delegated proving service.\n * @property apiKey {string} The API key to use for authentication.\n */\ninterface DelegatedProvingParams {\n    provingRequest: ProvingRequest | string;\n    url?: string;\n    apiKey?: string;\n}\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node.\n * const localNetworkClient = new AleoNetworkClient(\"http://0.0.0.0:3030\", undefined, account);\n *\n * // Connection to a public beacon node\n * const account = Account.fromCiphertext(process.env.ciphertext, process.env.password);\n * const publicNetworkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined, account);\n */\nclass AleoNetworkClient {\n    host: string;\n    headers: { [key: string]: string };\n    account: Account | undefined;\n    ctx: { [key: string]: string };\n    verboseErrors: boolean;\n    readonly network: string;\n\n    constructor(host: string, options?: AleoNetworkClientOptions) {\n        this.host = host + \"/%%NETWORK%%\";\n        this.network = \"%%NETWORK%%\";\n        this.ctx = {};\n        this.verboseErrors = true;\n\n        if (options && options.headers) {\n            this.headers = options.headers;\n        } else {\n            this.headers = {\n                // This is replaced by the actual version by a Rollup plugin\n                \"X-Aleo-SDK-Version\": \"%%VERSION%%\",\n                \"X-Aleo-environment\" : environment(),\n            };\n        }\n    }\n\n    /**\n     * Set an account to use in networkClient calls\n     *\n     * @param {Account} account Set an account to use for record scanning functions.\n     * @example\n     * import { Account, AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\");\n     * const account = new Account();\n     * networkClient.setAccount(account);\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Return the Aleo account used in the networkClient\n     *\n     * @example\n     * const account = networkClient.getAccount();\n     */\n    getAccount(): Account | undefined {\n        return this.account;\n    }\n\n    /**\n     * Set a new host for the networkClient\n     *\n     * @param {string} host The address of a node hosting the Aleo API\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a networkClient that connects to a local node.\n     * const networkClient = new AleoNetworkClient(\"http://0.0.0.0:3030\", undefined);\n     *\n     * // Set the host to a public node.\n     * networkClient.setHost(\"http://api.explorer.provable.com/v1\");\n     */\n    setHost(host: string) {\n        this.host = host + \"/%%NETWORK%%\";\n    }\n\n    /**\n     * Set verbose errors to true or false for the `AleoNetworkClient`. When set to true, if `submitTransaction` fails, the failure responses will report descriptive information as to why the transaction failed.\n     *\n     * @param {boolean} verboseErrors Set verbose error mode to true or false for the AleoNetworkClient.\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a networkClient\n     * const networkClient = new AleoNetworkClient();\n     *\n     * // Set debug mode to true\n     * networkClient.setVerboseTransactionErrors(true);\n     **/\n    setVerboseErrors(verboseErrors: boolean) {\n        this.verboseErrors = verboseErrors;\n    }\n\n    /**\n     * Set a header in the `AleoNetworkClient`s header map\n     *\n     * @param {string} headerName The name of the header to set\n     * @param {string} value The header value\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a networkClient\n     * const networkClient = new AleoNetworkClient();\n     *\n     * // Set the value of the `Accept-Language` header to `en-US`\n     * networkClient.setHeader('Accept-Language', 'en-US');\n     */\n    setHeader(headerName: string, value: string) {\n        this.headers[headerName] = value;\n    }\n\n    removeHeader(headerName: string) {\n        delete this.headers[headerName];\n    }\n\n    /**\n     * Fetches data from the Aleo network and returns it as a JSON object.\n     *\n     * @param url The URL to fetch data from.\n     */\n    async fetchData<Type>(url = \"/\"): Promise<Type> {\n        try {\n            const raw = await this.fetchRaw(url);\n            return parseJSON(raw);\n        } catch (error) {\n            throw new Error(`Error fetching data: ${error}`);\n        }\n    }\n\n    /**\n     * Fetches data from the Aleo network and returns it as an unparsed string.\n     *\n     * This method should be used when it is desired to reconstitute data returned\n     * from the network into a WASM object.\n     *\n     * @param url\n     */\n    async fetchRaw(url = \"/\"): Promise<string> {\n        try {\n            const ctx = {...this.ctx};\n            return await retryWithBackoff(async () => {\n                const response = await get(this.host + url, {\n                    headers: {\n                        ...this.headers,\n                        ...ctx,\n                    },\n                });\n                return await response.text();\n            });\n        } catch (error) {\n            throw new Error(`Error fetching data: ${error}`);\n        }\n    }\n\n    /**\n     * Wrapper around the POST helper to allow mocking in tests. Not meant for use in production.\n     *\n     * @param url The URL to POST to.\n     * @param options The RequestInit options for the POST request.\n     * @returns The Response object from the POST request.\n     */\n    private async _sendPost(url: string, options: RequestInit) {\n        return post(url, options);\n    }\n\n    /**\n     * Attempt to find records in the Aleo blockchain.\n     *\n     * @param {number} startHeight - The height at which to start searching for unspent records\n     * @param {number} endHeight - The height at which to stop searching for unspent records\n     * @param {boolean} unspent - Whether to search for unspent records only\n     * @param {string[]} programs - The program(s) to search for unspent records in\n     * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n     * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n     * @param {string[]} nonces - The nonces of already found records to exclude from the search\n     * @param {string | PrivateKey} privateKey - An optional private key to use to find unspent records.\n     * @returns {Promise<Array<RecordPlaintext>>} An array of records belonging to the account configured in the network client.\n     *\n     * @example\n     * import { Account, AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Import an account from a ciphertext and password.\n     * const account = Account.fromCiphertext(process.env.ciphertext, process.env.password);\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     * networkClient.setAccount(account);\n     *\n     * // Find specific amounts\n     * const startHeight = 500000;\n     * const amounts = [600000, 1000000];\n     * const records = networkClient.findRecords(startHeight, undefined, true, [\"credits.aleo\"] amounts);\n     *\n     * // Find specific amounts with a maximum number of cumulative microcredits\n     * const maxMicrocredits = 100000;\n     * const records = networkClient.findRecords(startHeight, undefined, true, [\"credits.aleo\"] undefined, maxMicrocredits);\n     */\n    async findRecords(\n        startHeight: number,\n        endHeight: number | undefined,\n        unspent: boolean = false,\n        programs?: string[],\n        amounts?: number[] | undefined,\n        maxMicrocredits?: number | undefined,\n        nonces?: string[] | undefined,\n        privateKey?: string | PrivateKey | undefined,\n    ): Promise<Array<RecordPlaintext>> {\n        nonces = nonces || [];\n        // Ensure start height is not negative\n        if (startHeight < 0) {\n            throw new Error(\"Start height must be greater than or equal to 0\");\n        }\n\n        // Initialize search parameters\n        const records = new Array<RecordPlaintext>();\n        let start;\n        let end;\n        let resolvedPrivateKey: PrivateKey;\n        let failures = 0;\n        let totalRecordValue = BigInt(0);\n        let latestHeight: number;\n\n        // Ensure a private key is present to find owned records\n        if (typeof privateKey === \"undefined\") {\n            if (typeof this.account === \"undefined\") {\n                throw new Error(\n                    \"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\",\n                );\n            } else {\n                resolvedPrivateKey = this.account._privateKey;\n            }\n        } else {\n            try {\n                resolvedPrivateKey =\n                    privateKey instanceof PrivateKey\n                        ? privateKey\n                        : PrivateKey.from_string(privateKey);\n            } catch (error) {\n                throw new Error(\"Error parsing private key provided.\");\n            }\n        }\n        const viewKey = resolvedPrivateKey.to_view_key();\n\n        // Get the latest height to ensure the range being searched is valid\n        try {\n            const blockHeight = await this.getLatestHeight();\n            if (typeof blockHeight === \"number\") {\n                latestHeight = blockHeight;\n            } else {\n                throw new Error(\n                    `Error fetching latest block height: Expected type 'number' got '${typeof blockHeight}'`,\n                );\n            }\n        } catch (error) {\n            throw new Error(`Error fetching latest block height: ${error}`);\n        }\n\n        // If no end height is specified or is greater than the latest height, set the end height to the latest height\n        if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n            end = endHeight;\n        } else {\n            end = latestHeight;\n        }\n\n        // If the starting is greater than the ending height, return an error\n        if (startHeight > end) {\n            throw new Error(\n                \"Start height must be less than or equal to end height.\",\n            );\n        }\n\n        // Iterate through blocks in reverse order in chunks of 50\n        while (end > startHeight) {\n            start = end - 50;\n            if (start < startHeight) {\n                start = startHeight;\n            }\n            try {\n                // Get 50 blocks (or the difference between the start and end if less than 50)\n                const blocks = await this.getBlockRange(start, end);\n                end = start;\n                // Iterate through blocks to find unspent records\n                for (let i = 0; i < blocks.length; i++) {\n                    const block = blocks[i];\n                    const transactions = block.transactions;\n                    if (!(typeof transactions === \"undefined\")) {\n                        for (let j = 0; j < transactions.length; j++) {\n                            const confirmedTransaction = transactions[j];\n                            // Search for unspent records in execute transactions of credits.aleo\n                            if (confirmedTransaction.type == \"execute\") {\n                                const transaction =\n                                    confirmedTransaction.transaction;\n                                if (\n                                    transaction.execution &&\n                                    !(\n                                        typeof transaction.execution\n                                            .transitions == \"undefined\"\n                                    )\n                                ) {\n                                    for (\n                                        let k = 0;\n                                        k <\n                                        transaction.execution.transitions\n                                            .length;\n                                        k++\n                                    ) {\n                                        const transition =\n                                            transaction.execution.transitions[\n                                                k\n                                                ];\n                                        // Only search for unspent records in the specified programs.\n                                        if (\n                                            !(typeof programs === \"undefined\")\n                                        ) {\n                                            if (\n                                                !programs.includes(\n                                                    transition.program,\n                                                )\n                                            ) {\n                                                continue;\n                                            }\n                                        }\n                                        if (\n                                            !(\n                                                typeof transition.outputs ==\n                                                \"undefined\"\n                                            )\n                                        ) {\n                                            for (\n                                                let l = 0;\n                                                l < transition.outputs.length;\n                                                l++\n                                            ) {\n                                                const output =\n                                                    transition.outputs[l];\n                                                if (output.type === \"record\") {\n                                                    try {\n                                                        // Create a wasm record ciphertext object from the found output\n                                                        const record =\n                                                            RecordCiphertext.fromString(\n                                                                output.value,\n                                                            );\n                                                        // Determine if the record is owned by the specified view key\n                                                        if (\n                                                            record.isOwner(\n                                                                viewKey,\n                                                            )\n                                                        ) {\n                                                            // Decrypt the record and get the serial number\n                                                            const recordPlaintext =\n                                                                record.decrypt(\n                                                                    viewKey,\n                                                                );\n\n                                                            // If the record has already been found, skip it\n                                                            const nonce =\n                                                                recordPlaintext.nonce();\n                                                            if (\n                                                                nonces.includes(\n                                                                    nonce,\n                                                                )\n                                                            ) {\n                                                                continue;\n                                                            }\n\n                                                            if (unspent) {\n                                                                const recordViewKey = recordPlaintext.recordViewKey(viewKey).toString();\n                                                                // Otherwise record the nonce that has been found\n                                                                const serialNumber =\n                                                                    recordPlaintext.serialNumberString(\n                                                                        resolvedPrivateKey,\n                                                                        \"credits.aleo\",\n                                                                        \"credits\",\n                                                                        recordViewKey\n                                                                    );\n                                                                // Attempt to see if the serial number is spent\n                                                                try {\n                                                                    await retryWithBackoff(\n                                                                        () =>\n                                                                            this.getTransitionId(\n                                                                                serialNumber,\n                                                                            ),\n                                                                    );\n                                                                    continue;\n                                                                } catch (error) {\n                                                                    console.log(\n                                                                        \"Found unspent record!\",\n                                                                    );\n                                                                }\n                                                            }\n\n                                                            // Add the record to the list of records if the user did not specify amounts.\n                                                            if (!amounts) {\n                                                                records.push(\n                                                                    recordPlaintext,\n                                                                );\n                                                                // If the user specified a maximum number of microcredits, check if the search has found enough\n                                                                if (\n                                                                    typeof maxMicrocredits ===\n                                                                    \"number\"\n                                                                ) {\n                                                                    totalRecordValue +=\n                                                                        recordPlaintext.microcredits();\n                                                                    // Exit if the search has found the amount specified\n                                                                    if (\n                                                                        totalRecordValue >=\n                                                                        BigInt(\n                                                                            maxMicrocredits,\n                                                                        )\n                                                                    ) {\n                                                                        return records;\n                                                                    }\n                                                                }\n                                                            }\n\n                                                            // If the user specified a list of amounts, check if the search has found them\n                                                            if (\n                                                                !(\n                                                                    typeof amounts ===\n                                                                    \"undefined\"\n                                                                ) &&\n                                                                amounts.length >\n                                                                0\n                                                            ) {\n                                                                let amounts_found = 0;\n                                                                if (\n                                                                    recordPlaintext.microcredits() >\n                                                                    amounts[\n                                                                        amounts_found\n                                                                        ]\n                                                                ) {\n                                                                    amounts_found += 1;\n                                                                    records.push(\n                                                                        recordPlaintext,\n                                                                    );\n                                                                    // If the user specified a maximum number of microcredits, check if the search has found enough\n                                                                    if (\n                                                                        typeof maxMicrocredits ===\n                                                                        \"number\"\n                                                                    ) {\n                                                                        totalRecordValue +=\n                                                                            recordPlaintext.microcredits();\n                                                                        // Exit if the search has found the amount specified\n                                                                        if (\n                                                                            totalRecordValue >=\n                                                                            BigInt(\n                                                                                maxMicrocredits,\n                                                                            )\n                                                                        ) {\n                                                                            return records;\n                                                                        }\n                                                                    }\n                                                                    if (\n                                                                        records.length >=\n                                                                        amounts.length\n                                                                    ) {\n                                                                        return records;\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    } catch (error) {}\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (error) {\n                // If there is an error fetching blocks, log it and keep searching\n                console.warn(\n                    \"Error fetching blocks in range: \" +\n                    start.toString() +\n                    \"-\" +\n                    end.toString(),\n                );\n                console.warn(\"Error: \", error);\n                failures += 1;\n                if (failures > 10) {\n                    console.warn(\n                        \"10 failures fetching records reached. Returning records fetched so far\",\n                    );\n                    return records;\n                }\n            }\n        }\n        return records;\n    }\n\n    /**\n     * Attempts to find unspent records in the Aleo blockchain.\n     *\n     * @param {number} startHeight - The height at which to start searching for unspent records\n     * @param {number} endHeight - The height at which to stop searching for unspent records\n     * @param {string[]} programs - The program(s) to search for unspent records in\n     * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n     * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n     * @param {string[]} nonces - The nonces of already found records to exclude from the search\n     * @param {string | PrivateKey} privateKey - An optional private key to use to find unspent records.\n     * @returns {Promise<Array<RecordPlaintext>>} An array of unspent records belonging to the account configured in the network client.\n     *\n     * @example\n     * import { Account, AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * const account = Account.fromCiphertext(process.env.ciphertext, process.env.password);\n     *\n     * // Create a network client and set an account to search for records with.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     * networkClient.setAccount(account);\n     *\n     * // Find specific amounts\n     * const startHeight = 500000;\n     * const endHeight = 550000;\n     * const amounts = [600000, 1000000];\n     * const records = networkClient.findUnspentRecords(startHeight, endHeight, [\"credits.aleo\"], amounts);\n     *\n     * // Find specific amounts with a maximum number of cumulative microcredits\n     * const maxMicrocredits = 100000;\n     * const records = networkClient.findUnspentRecords(startHeight, undefined, [\"credits.aleo\"], undefined, maxMicrocredits);\n     */\n    async findUnspentRecords(\n        startHeight: number,\n        endHeight: number | undefined,\n        programs?: string[],\n        amounts?: number[] | undefined,\n        maxMicrocredits?: number | undefined,\n        nonces?: string[] | undefined,\n        privateKey?: string | PrivateKey | undefined,\n    ): Promise<Array<RecordPlaintext>> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"findUnspentRecords\" };\n            return await this.findRecords(\n                startHeight,\n                endHeight,\n                true,\n                programs,\n                amounts,\n                maxMicrocredits,\n                nonces,\n                privateKey,\n            );\n        } catch (error) {\n            throw new Error(\"Error finding unspent records: \" + error);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the contents of the block at the specified block height.\n     *\n     * @param {number} blockHeight - The height of the block to fetch\n     * @returns {Promise<BlockJSON>} A javascript object containing the block at the specified height\n     *\n     * @example\n     * const block = networkClient.getBlock(1234);\n     */\n    async getBlock(blockHeight: number): Promise<BlockJSON> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getBlock\" };\n            const block = await this.fetchData<BlockJSON>(\n                \"/block/\" + blockHeight,\n            );\n            return block;\n        } catch (error) {\n            throw new Error(`Error fetching block ${blockHeight}: ${error}`);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the contents of the block with the specified hash.\n     *\n     * @param {string} blockHash The hash of the block to fetch.\n     * @returns {Promise<BlockJSON>} A javascript object representation of the block matching the hash.\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     * const block = networkClient.getBlockByHash(\"ab19dklwl9vp63zu3hwg57wyhvmqf92fx5g8x0t6dr72py8r87pxupqfne5t9\");\n     */\n    async getBlockByHash(blockHash: string): Promise<BlockJSON> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getBlockByHash\" };\n            const block = await this.fetchData<BlockJSON>(\n                `/block/${blockHash}`,\n            );\n            return block;\n        } catch (error) {\n            throw new Error(`Error fetching block ${blockHash}: ${error}`);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns a range of blocks between the specified block heights. A maximum of 50 blocks can be fetched at a time.\n     *\n     * @param {number} start Starting block to fetch.\n     * @param {number} end Ending block to fetch. This cannot be more than 50 blocks ahead of the start block.\n     * @returns {Promise<Array<BlockJSON>>} An array of block objects\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Fetch 50 blocks.\n     * const (start, end) = (2050, 2100);\n     * const blockRange = networkClient.getBlockRange(start, end);\n     *\n     * let cursor = start;\n     * blockRange.forEach((block) => {\n     *   assert(block.height == cursor);\n     *   cursor += 1;\n     *  }\n     */\n    async getBlockRange(start: number, end: number): Promise<Array<BlockJSON>> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getBlockRange\" };\n            return await this.fetchData<Array<BlockJSON>>(\n                \"/blocks?start=\" + start + \"&end=\" + end,\n            );\n        } catch (error) {\n            throw new Error(\n                `Error fetching blocks between ${start} and ${end}: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the deployment transaction id associated with the specified program.\n     *\n     * @param {Program | string} program The name of the deployed program OR a wasm Program object.\n     * @returns {Promise<string>} The transaction ID of the deployment transaction.\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/testnet.js\";\n     *\n     * // Get the transaction ID of the deployment transaction for a program.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     * const transactionId = networkClient.getDeploymentTransactionIDForProgram(\"hello_hello.aleo\");\n     *\n     * // Get the transaction data for the deployment transaction.\n     * const transaction = networkClient.getTransactionObject(transactionId);\n     *\n     * // Get the verifying keys for the functions in the deployed program.\n     * const verifyingKeys = transaction.verifyingKeys();\n     */\n    async getDeploymentTransactionIDForProgram(\n        program: Program | string,\n    ): Promise<string> {\n        this.ctx = { \"X-ALEO-METHOD\": \"getDeploymentTransactionIDForProgram\" };\n        if (program instanceof Program) {\n            program = program.id();\n        }\n        try {\n            const id = await this.fetchData<string>(\n                \"/find/transactionID/deployment/\" + program,\n            );\n            return id.replace('\"', \"\");\n        } catch (error) {\n            throw new Error(\n                `Error fetching deployment transaction for program ${program}: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the deployment transaction associated with a specified program as a JSON object.\n     *\n     * @param {Program | string} program The name of the deployed program OR a wasm Program object.\n     * @returns {Promise<Transaction>} JSON representation of the deployment transaction.\n     *\n     * @example\n     * import { AleoNetworkClient, DeploymentJSON } from \"@provablehq/sdk/testnet.js\";\n     *\n     * // Get the transaction ID of the deployment transaction for a program.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     * const transaction = networkClient.getDeploymentTransactionForProgram(\"hello_hello.aleo\");\n     *\n     * // Get the verifying keys for each function in the deployment.\n     * const deployment = <DeploymentJSON>transaction.deployment;\n     * const verifyingKeys = deployment.verifying_keys;\n     */\n    async getDeploymentTransactionForProgram(\n        program: Program | string,\n    ): Promise<TransactionJSON> {\n        if (program instanceof Program) {\n            program = program.id();\n        }\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getDeploymentTransactionForProgram\" };\n            const transaction_id = <string>(\n                await this.getDeploymentTransactionIDForProgram(program)\n            );\n            return <TransactionJSON>await this.getTransaction(transaction_id);\n        } catch (error) {\n            throw new Error(\n                `Error fetching deployment transaction for program ${program}: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the deployment transaction associated with a specified program as a wasm object.\n     *\n     * @param {Program | string} program The name of the deployed program OR a wasm Program object.\n     * @returns {Promise<Transaction>} Wasm object representation of the deployment transaction.\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/testnet.js\";\n     *\n     * // Get the transaction ID of the deployment transaction for a program.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     * const transactionId = networkClient.getDeploymentTransactionIDForProgram(\"hello_hello.aleo\");\n     *\n     * // Get the transaction data for the deployment transaction.\n     * const transaction = networkClient.getDeploymentTransactionObjectForProgram(transactionId);\n     *\n     * // Get the verifying keys for the functions in the deployed program.\n     * const verifyingKeys = transaction.verifyingKeys();\n     */\n    async getDeploymentTransactionObjectForProgram(\n        program: Program | string,\n    ): Promise<Transaction> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getDeploymentTransactionObjectForProgram\" };\n            const transaction_id = <string>(\n                await this.getDeploymentTransactionIDForProgram(program)\n            );\n            return await this.getTransactionObject(transaction_id);\n        } catch (error) {\n            throw new Error(\n                `Error fetching deployment transaction for program ${program}: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the contents of the latest block as JSON.\n     *\n     * @returns {Promise<BlockJSON>} A javascript object containing the latest block\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/testnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * const latestHeight = networkClient.getLatestBlock();\n     */\n    async getLatestBlock(): Promise<BlockJSON> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getLatestBlock\" };\n            return (await this.fetchData<BlockJSON>(\n                \"/block/latest\",\n            )) as BlockJSON;\n        } catch (error) {\n            throw new Error(`Error fetching latest block: ${error}`);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the latest committee.\n     *\n     * @returns {Promise<object>} A javascript object containing the latest committee\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * // Create a network client and get the latest committee.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     * const latestCommittee = await networkClient.getLatestCommittee();\n     */\n    async getLatestCommittee(): Promise<object> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getLatestCommittee\" };\n            return await this.fetchData<object>(\"/committee/latest\");\n        } catch (error) {\n            throw new Error(`Error fetching latest committee: ${error}`);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the committee at the specified block height.\n     *\n     * @param {number} blockHeight - The height of the block to fetch the committee for\n     * @returns {Promise<object>} A javascript object containing the committee\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * // Create a network client and get the committee for a specific block.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     * const committee = await networkClient.getCommitteeByBlockHeight(1234);\n     */\n    async getCommitteeByBlockHeight(blockHeight: number): Promise<object> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getCommitteeByBlockHeight\" };\n            return await this.fetchData<object>(`/committee/${blockHeight}`);\n        } catch (error) {\n            throw new Error(\n                `Error fetching committee at height ${blockHeight}: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the latest block height.\n     *\n     * @returns {Promise<number>} The latest block height.\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * const latestHeight = networkClient.getLatestHeight();\n     */\n    async getLatestHeight(): Promise<number> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getLatestHeight\" };\n            return Number(await this.fetchData<bigint>(\"/block/height/latest\"));\n        } catch (error) {\n            throw new Error(`Error fetching latest height: ${error}`);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the latest block hash.\n     *\n     * @returns {Promise<string>} The latest block hash.\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * // Get the latest block hash.\n     * const latestHash = networkClient.getLatestBlockHash();\n     */\n    async getLatestBlockHash(): Promise<string> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getLatestBlockHash\" };\n            return String(await this.fetchData<string>(\"/block/hash/latest\"));\n        } catch (error) {\n            throw new Error(`Error fetching latest hash: ${error}`);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the source code of a program given a program ID.\n     *\n     * @param {string} programId The program ID of a program deployed to the Aleo Network.\n     * @param {number | undefined} edition The edition of the program to fetch. When this is undefined it will fetch the latest version.\n     * @returns {Promise<string>} The source code of the program.\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * // Get the source code of a program.)\n     * @returns {Promise<string>} Source code of the program\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * const program = networkClient.getProgram(\"hello_hello.aleo\");\n     * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n     * assert.equal(program, expectedSource);\n     */\n    async getProgram(programId: string, edition?: number): Promise<string> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getProgramVersion\" };\n            if (typeof edition === \"number\") {\n                return await this.fetchData<string>(\n                    `/program/${programId}/${edition}`,\n                );\n            } else {\n                return await this.fetchData<string>(\"/program/\" + programId);\n            }\n        } catch (error) {\n            throw new Error(`Error fetching program ${programId}: ${error}`);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the current program edition deployed on the Aleo network.\n     *\n     * @param {string} programId The program ID of a program deployed to the Aleo Network.\n     * @returns {Promise<number>} The edition of the program.\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * const programVersion = networkClient.getLatestProgramEdition(\"hello_hello.aleo\");\n     * assert.equal(programVersion, 1);\n     */\n    async getLatestProgramEdition(programId: string): Promise<number> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getLatestProgramEdition\" };\n            const raw = await this.fetchRaw(\"/program/\" + programId + \"/latest_edition\");\n            return JSON.parse(raw);\n        } catch (error) {\n            throw new Error(`Error fetching program ${programId}: ${error}`);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns a program object from a program ID or program source code.\n     *\n     * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network.\n     * @param {number | undefined} edition The edition of the program to fetch. When this is undefined it will fetch the latest version.\n     * @returns {Promise<Program>} Source code of the program.\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * const programID = \"hello_hello.aleo\";\n     * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n     *\n     * // Get program object from program ID or program source code\n     * const programObjectFromID = await networkClient.getProgramObject(programID);\n     * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n     *\n     * // Both program objects should be equal\n     * assert(programObjectFromID.to_string() === programObjectFromSource.to_string());\n     */\n    async getProgramObject(inputProgram: string, edition?: number): Promise<Program> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getProgramObject\" };\n            return Program.fromString(\n                <string>await this.getProgram(inputProgram, edition),\n            );\n        } catch (error) {\n            throw new Error(\n                `${inputProgram} is neither a program name or a valid program: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     *  Returns an object containing the source code of a program and the source code of all programs it imports\n     *\n     * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n     * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n     * const double_test = Program.fromString(double_test_source);\n     * const expectedImports = {\n     *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n     * }\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * // Imports can be fetched using the program ID, source code, or program object\n     * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n     * assert.deepStrictEqual(programImports, expectedImports);\n     *\n     * // Using the program source code\n     * programImports = await networkClient.getProgramImports(double_test_source);\n     * assert.deepStrictEqual(programImports, expectedImports);\n     *\n     * // Using the program object\n     * programImports = await networkClient.getProgramImports(double_test);\n     * assert.deepStrictEqual(programImports, expectedImports);\n     */\n    async getProgramImports(inputProgram: Program | string): Promise<ProgramImports> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getProgramImports\" };\n            const imports: ProgramImports = {};\n\n            // Normalize input to a Program object\n            let program: Program;\n            if (inputProgram instanceof Program) {\n                program = inputProgram;\n            } else {\n                try {\n                    program = Program.fromString(inputProgram);\n                } catch {\n                    try {\n                        program = await this.getProgramObject(inputProgram);\n                    } catch (error2) {\n                        throw new Error(\n                            `${inputProgram} is neither a program name nor a valid program: ${error2}`,\n                        );\n                    }\n                }\n            }\n\n            // Get the list of programs that the program imports\n            const importList = program.getImports();\n\n            // Recursively get any imports that the imported programs have in a depth-first search\n            for (let i = 0; i < importList.length; i++) {\n                const import_id = importList[i];\n                if (!imports.hasOwnProperty(import_id)) {\n                    const programSource = <string>await this.getProgram(import_id);\n                    const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n\n                    for (const key in nestedImports) {\n                        if (!imports.hasOwnProperty(key)) {\n                            imports[key] = nestedImports[key];\n                        }\n                    }\n\n                    imports[import_id] = programSource;\n                }\n            }\n\n            return imports;\n        } catch (error: any) {\n            logAndThrow(\"Error fetching program imports: \" + error.message);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n\n    /**\n     * Get a list of the program names that a program imports.\n     *\n     * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n     * @returns {string[]} - The list of program names that the program imports\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * const programImportsNames = networkClient.getProgramImports(\"wrapped_credits.aleo\");\n     * const expectedImportsNames = [\"credits.aleo\"];\n     * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n     */\n    async getProgramImportNames(\n        inputProgram: Program | string,\n    ): Promise<string[]> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getProgramImportNames\" };\n            const program =\n                inputProgram instanceof Program\n                    ? inputProgram\n                    : <Program>await this.getProgramObject(inputProgram);\n            return program.getImports();\n        } catch (error: any) {\n            throw new Error(\n                `Error fetching imports for program ${inputProgram instanceof Program ? inputProgram.id() : inputProgram}: ${error.message}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the names of the mappings of a program.\n     *\n     * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n     * @returns {Promise<Array<string>>} - The names of the mappings of the program.\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n     * const expectedMappings = [\n     *   \"committee\",\n     *   \"delegated\",\n     *   \"metadata\",\n     *   \"bonded\",\n     *   \"unbonding\",\n     *   \"account\",\n     *   \"withdraw\"\n     * ];\n     * assert.deepStrictEqual(mappings, expectedMappings);\n     */\n    async getProgramMappingNames(programId: string): Promise<Array<string>> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getProgramMappingNames\" };\n            return await this.fetchData<Array<string>>(\n                `/program/${programId}/mappings`,\n            );\n        } catch (error) {\n            throw new Error(\n                `Error fetching mappings for program ${programId} - ensure the program exists on chain before trying again: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the value of a program's mapping for a specific key.\n     *\n     * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n     * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n     * @param {string | Plaintext} key - The key to look up in the mapping (e.g. an address for the \"account\" mapping)\n     * @returns {Promise<string>} String representation of the value of the mapping\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * // Get public balance of an account\n     * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n     * const expectedValue = \"0u64\";\n     * assert(mappingValue === expectedValue);\n     */\n    async getProgramMappingValue(\n        programId: string,\n        mappingName: string,\n        key: string | Plaintext,\n    ): Promise<string> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getProgramMappingValue\" };\n            const keyString = key instanceof Plaintext ? key.toString() : key;\n            return await this.fetchData<string>(\n                `/program/${programId}/mapping/${mappingName}/${keyString}`,\n            );\n        } catch (error) {\n            throw new Error(\n                `Error fetching value for key '${key}' in mapping '${mappingName}' in program '${programId}' - ensure the mapping exists and the key is correct: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the value of a mapping as a wasm Plaintext object. Returning an object in this format allows it to be converted to a Js type and for its internal members to be inspected if it's a struct or array.\n     *\n     * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n     * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"bonded\")\n     * @param {string | Plaintext} key - The key to look up in the mapping (e.g. an address for the \"bonded\" mapping)\n     * @returns {Promise<Plaintext>} String representation of the value of the mapping\n     *\n     * @example\n     * import { AleoNetworkClient } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * // Get the bond state as an account.\n     * const unbondedState = networkClient.getMappingPlaintext(\"credits.aleo\", \"bonded\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n     *\n     * // Get the two members of the object individually.\n     * const validator = unbondedState.getMember(\"validator\");\n     * const microcredits = unbondedState.getMember(\"microcredits\");\n     *\n     * // Ensure the expected values are correct.\n     * assert.equal(validator, \"aleo1u6940v5m0fzud859xx2c9tj2gjg6m5qrd28n636e6fdd2akvfcgqs34mfd\");\n     * assert.equal(microcredits, BigInt(\"9007199254740991\"));\n     *\n     * // Get a JS object representation of the unbonded state.\n     * const unbondedStateObject = unbondedState.toObject();\n     *\n     * const expectedState = {\n     *     validator: \"aleo1u6940v5m0fzud859xx2c9tj2gjg6m5qrd28n636e6fdd2akvfcgqs34mfd\",\n     *     microcredits: BigInt(9007199254740991)\n     * };\n     * assert.equal(unbondedState, expectedState);\n     */\n    async getProgramMappingPlaintext(\n        programId: string,\n        mappingName: string,\n        key: string | Plaintext,\n    ): Promise<Plaintext> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getProgramMappingPlaintext\" };\n            const keyString = key instanceof Plaintext ? key.toString() : key;\n            const value = await this.fetchRaw(\n                `/program/${programId}/mapping/${mappingName}/${keyString}`,\n            );\n            return Plaintext.fromString(JSON.parse(value));\n        } catch (error) {\n            throw new Error(\"Failed to fetch mapping value.\" + error);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the public balance of an address from the account mapping in credits.aleo\n     *\n     * @param {Address | string} address A string or wasm object representing an address.\n     * @returns {Promise<number>} The public balance of the address in microcredits.\n     *\n     * @example\n     * import { AleoNetworkClient, Account } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * // Get the balance of an account from either an address object or address string.\n     * const account = Account.fromCiphertext(process.env.ciphertext, process.env.password);\n     * const publicBalance = await networkClient.getPublicBalance(account.address());\n     * const publicBalanceFromString = await networkClient.getPublicBalance(account.address().to_string());\n     * assert(publicBalance === publicBalanceFromString);\n     */\n    async getPublicBalance(address: Address | string): Promise<number> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getPublicBalance\" };\n            const addressString =\n                address instanceof Address ? address.to_string() : address;\n            const balanceStr = await this.getProgramMappingValue(\n                \"credits.aleo\",\n                \"account\",\n                addressString,\n            );\n            return balanceStr ? parseInt(balanceStr) : 0;\n        } catch (error) {\n            throw new Error(\n                `Error fetching public balance for ${address}: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the latest state/merkle root of the Aleo blockchain.\n     *\n     * @returns {Promise<string>} A string representing the latest state root of the Aleo blockchain.\n     *\n     * @example\n     * import { AleoNetworkClient, Account } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * // Get the latest state root.\n     * const stateRoot = networkClient.getStateRoot();\n     */\n    async getStateRoot(): Promise<string> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getStateRoot\" };\n            return await this.fetchData<string>(\"/stateRoot/latest\");\n        } catch (error) {\n            throw new Error(`Error fetching latest state root: ${error}`);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns a transaction by its unique identifier.\n     *\n     * @param {string} transactionId The transaction ID to fetch.\n     * @returns {Promise<TransactionJSON>} A json representation of the transaction.\n     *\n     * @example\n     * import { AleoNetworkClient, Account } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n     */\n    async getTransaction(transactionId: string): Promise<TransactionJSON> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getTransaction\" };\n            return await this.fetchData<TransactionJSON>(\n                \"/transaction/\" + transactionId,\n            );\n        } catch (error) {\n            throw new Error(\n                `Error fetching transaction ${transactionId}: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns a confirmed transaction by its unique identifier.\n     *\n     * @param {string} transactionId The transaction ID to fetch.\n     * @returns {Promise<ConfirmedTransactionJSON>} A json object containing the confirmed transaction.\n     *\n     * @example\n     * import { AleoNetworkClient, Account } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * const transaction = networkClient.getConfirmedTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n     * assert.equal(transaction.status, \"confirmed\");\n     */\n    async getConfirmedTransaction(\n        transactionId: string,\n    ): Promise<ConfirmedTransactionJSON> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getConfirmedTransaction\" };\n            return await this.fetchData<ConfirmedTransactionJSON>(\n                `/transaction/confirmed/${transactionId}`,\n            );\n        } catch (error) {\n            throw new Error(\n                `Error fetching confirmed transaction ${transactionId}: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns a transaction as a wasm object. Getting a transaction of this type will allow the ability for the inputs,\n     * outputs, and records to be searched for and displayed.\n     *\n     * @param {string} transactionId - The unique identifier of the transaction to fetch\n     * @returns {Promise<Transaction>} A wasm object representation of the transaction.\n     *\n     * @example\n     * const transactionObject = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n     * // Get the transaction inputs as a JS array.\n     * const transactionInputs = transactionObject.inputs(true);\n     *\n     * // Get the transaction outputs as a JS object.\n     * const transactionOutputs = transactionObject.outputs(true);\n     *\n     * // Get any records generated in transitions in the transaction as a JS object.\n     * const records = transactionObject.records();\n     *\n     * // Get the transaction type.\n     * const transactionType = transactionObject.transactionType();\n     * assert.equal(transactionType, \"Execute\");\n     *\n     * // Get a JS representation of all inputs, outputs, and transaction metadata.\n     * const transactionSummary = transactionObject.summary();\n     */\n    async getTransactionObject(transactionId: string): Promise<Transaction> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getTransactionObject\" };\n            const transaction = await this.fetchRaw(\n                \"/transaction/\" + transactionId,\n            );\n            return Transaction.fromString(transaction);\n        } catch (error) {\n            throw new Error(\n                `Error fetching transaction object ${transactionId}: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the transactions present at the specified block height.\n     *\n     * @param {number} blockHeight The block height to fetch the confirmed transactions at.\n     * @returns {Promise<Array<ConfirmedTransactionJSON>>} An array of confirmed transactions (in JSON format) for the block height.\n     *\n     * @example\n     * import { AleoNetworkClient, Account } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * const transactions = networkClient.getTransactions(654);\n     */\n    async getTransactions(\n        blockHeight: number,\n    ): Promise<Array<ConfirmedTransactionJSON>> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getTransactions\" };\n            return await this.fetchData<Array<ConfirmedTransactionJSON>>(\n                \"/block/\" + blockHeight.toString() + \"/transactions\",\n            );\n        } catch (error) {\n            throw new Error(`Error fetching transactions: ${error}`);\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the confirmed transactions present in the block with the specified block hash.\n     *\n     * @param {string} blockHash The block hash to fetch the confirmed transactions at.\n     * @returns {Promise<Array<ConfirmedTransactionJSON>>} An array of confirmed transactions (in JSON format) for the block hash.\n     *\n     * @example\n     * import { AleoNetworkClient, Account } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * const transactions = networkClient.getTransactionsByBlockHash(\"ab19dklwl9vp63zu3hwg57wyhvmqf92fx5g8x0t6dr72py8r87pxupqfne5t9\");\n     */\n    async getTransactionsByBlockHash(\n        blockHash: string,\n    ): Promise<Array<ConfirmedTransactionJSON>> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getTransactionsByBlockHash\" };\n            const block = await this.fetchData<BlockJSON>(\n                `/block/${blockHash}`,\n            );\n            const height = block.header.metadata.height;\n            return await this.getTransactions(Number(height));\n        } catch (error) {\n            throw new Error(\n                `Error fetching transactions for block ${blockHash}: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the transactions in the memory pool. This method requires access to a validator's REST API.\n     *\n     * @returns {Promise<Array<TransactionJSON>>} An array of transactions (in JSON format) currently in the mempool.\n     *\n     * @example\n     * import { AleoNetworkClient, Account } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     *\n     * // Get the current transactions in the mempool.\n     * const transactions = networkClient.getTransactionsInMempool();\n     */\n    async getTransactionsInMempool(): Promise<Array<TransactionJSON>> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getTransactionsInMempool\" };\n            return await this.fetchData<Array<TransactionJSON>>(\n                \"/memoryPool/transactions\",\n            );\n        } catch (error) {\n            throw new Error(\n                `Error fetching transactions from mempool: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Returns the transition ID of the transition corresponding to the ID of the input or output.\n     * @param {string} inputOrOutputID - The unique identifier of the input or output to find the transition ID for\n     * @returns {Promise<string>} - The transition ID of the input or output ID.\n     *\n     * @example\n     * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n     */\n    async getTransitionId(inputOrOutputID: string): Promise<string> {\n        try {\n            this.ctx = { \"X-ALEO-METHOD\": \"getTransitionId\" };\n            return await this.fetchData<string>(\n                \"/find/transitionID/\" + inputOrOutputID,\n            );\n        } catch (error) {\n            throw new Error(\n                `Error fetching transition ID for input/output ${inputOrOutputID}: ${error}`,\n            );\n        } finally {\n            this.ctx = {};\n        }\n    }\n\n    /**\n     * Submit an execute or deployment transaction to the Aleo network.\n     *\n     * @param {Transaction | string} transaction - The transaction to submit, either as a Transaction object or string representation\n     * @returns {Promise<string>} - The transaction id of the submitted transaction or the resulting error\n     */\n    async submitTransaction(\n        transaction: Transaction | string,\n    ): Promise<string> {\n        const transactionString =\n            transaction instanceof Transaction\n                ? transaction.toString()\n                : transaction;\n        try {\n            const endpoint = this.verboseErrors ? \"transaction/broadcast?check_transaction=true\" : \"transaction/broadcast\";\n            const response = await retryWithBackoff(() =>\n                this._sendPost(`${this.host}/${endpoint}`, {\n                    body: transactionString,\n                    headers: Object.assign({}, {...this.headers, \"X-ALEO-METHOD\" : \"submitTransaction\"}, {\n                        \"Content-Type\": \"application/json\",\n                    }),\n                }),\n            );\n\n            try {\n                const text = await response.text();\n                return parseJSON(text);\n            } catch (error: any) {\n                throw new Error(\n                    `Error posting transaction. Aleo network response: ${error.message}`,\n                );\n            }\n        } catch (error: any) {\n            throw new Error(\n                `Error posting transaction: No response received: ${error.message}`,\n            );\n        }\n    }\n\n    /**\n     * Submit a solution to the Aleo network.\n     *\n     * @param {string} solution - The string representation of the solution to submit\n     * @returns {Promise<string>} The solution id of the submitted solution or the resulting error.\n     */\n    async submitSolution(solution: string): Promise<string> {\n        try {\n            const response = await retryWithBackoff(() =>\n                post(this.host + \"/solution/broadcast\", {\n                    body: solution,\n                    headers: Object.assign({}, {...this.headers, \"X-ALEO-METHOD\": \"submitSolution\"}, {\n                        \"Content-Type\": \"application/json\",\n                    }),\n                }),\n            );\n\n            try {\n                const text = await response.text();\n                return parseJSON(text);\n            } catch (error: any) {\n                throw new Error(\n                    `Error posting solution. Aleo network response: ${error.message}`,\n                );\n            }\n        } catch (error: any) {\n            throw new Error(\n                `Error posting solution: No response received: ${error.message}`,\n            );\n        }\n    }\n\n    /**\n     * Submit a `ProvingRequest` to a remote proving service for delegated proving. If the broadcast flag of the `ProvingRequest` is set to `true` the remote service will attempt to broadcast the result `Transaction` on behalf of the requestor.\n     *\n     * @param {DelegatedProvingParams} options - The optional parameters required to submit a proving request.\n     * @returns {Promise<ProvingResponse>} The ProvingResponse containing the transaction result and the result of the broadcast if the `broadcast` flag was set to `true`.\n     */\n    async submitProvingRequest(options: DelegatedProvingParams): Promise<ProvingResponse> {\n        const proverUri = options.url ?? this.host;\n        const provingRequestString = options.provingRequest instanceof ProvingRequest\n            ? options.provingRequest.toString()\n            : options.provingRequest;\n\n        // Build headers with proper auth fallback\n        const headers: Record<string, string> = {\n          ...this.headers,\n          \"X-ALEO-METHOD\": \"submitProvingRequest\",\n          \"Content-Type\": \"application/json\"\n        };\n\n        // Add auth header based on what's available\n        if (options.apiKey) {\n          headers[\"X-Provable-API-Key\"] = options.apiKey;\n        }\n\n        try {\n            const response = await retryWithBackoff(() =>\n                post(`${proverUri}/prove`, {\n                body: provingRequestString,\n                 headers\n                })\n            );\n            const responseText = await response.text();\n            return parseJSON(responseText);\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n            throw new Error(`Failed to submit proving request: ${errorMessage}`);\n        }\n    }\n\n    /**\n     * Await a submitted transaction to be confirmed or rejected on the Aleo network.\n     *\n     * @param {string} transactionId - The transaction ID to wait for confirmation\n     * @param {number} checkInterval - The interval in milliseconds to check for confirmation (default: 2000)\n     * @param {number} timeout - The maximum time in milliseconds to wait for confirmation (default: 45000)\n     * @returns {Promise<Transaction>} The confirmed transaction object that returns if the transaction is confirmed.\n     *\n     * @example\n     * import { AleoNetworkClient, Account, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a network client and program manager.\n     * const networkClient = new AleoNetworkClient(\"http://api.explorer.provable.com/v1\", undefined);\n     * const programManager = new ProgramManager(networkClient);\n     *\n     * // Set the account for the program manager.\n     * programManager.setAccount(Account.fromCiphertext(process.env.ciphertext, process.env.password));\n     *\n     * // Build a transfer transaction.\n     * const tx = await programManager.buildTransferPublicTransaction(100, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 0);\n     *\n     * // Submit the transaction to the network.\n     * const transactionId = await networkClient.submitTransaction(tx);\n     *\n     * // Wait for the transaction to be confirmed.\n     * const transaction = await networkClient.waitForTransactionConfirmation(transactionId);\n     */\n    async waitForTransactionConfirmation(\n        transactionId: string,\n        checkInterval: number = 2000,\n        timeout: number = 45000,\n    ): Promise<ConfirmedTransactionJSON> {\n        const startTime = Date.now();\n\n        return new Promise((resolve, reject) => {\n            const interval = setInterval(async () => {\n                const elapsed = Date.now() - startTime;\n\n                if (elapsed > timeout) {\n                    clearInterval(interval);\n                    return reject(\n                        new Error(\n                            `Transaction ${transactionId} did not appear after the timeout period of ${interval}ms - consider resubmitting the transaction`,\n                        ),\n                    );\n                }\n\n                try {\n                    const res = await fetch(\n                        `${this.host}/transaction/confirmed/${transactionId}`,\n                        {\n                            headers: {\n                                ...this.headers,\n                                \"X-ALEO-METHOD\" : \"waitForTransactionConfirmation\",\n                            },\n                        },\n                    );\n                    if (!res.ok) {\n                        let text = \"\";\n                        try {\n                            text = await res.text();\n                            console.warn(\"Response text from server:\", text);\n                        } catch (err) {\n                            console.warn(\"Failed to read response text:\", err);\n                        }\n\n                        // If the transaction ID is malformed (e.g. invalid checksum, wrong length),\n                        // the API returns a 4XX with \"Invalid URL\" — we treat this as a fatal error and stop polling.\n                        if (\n                            res.status >= 400 &&\n                            res.status < 500 &&\n                            text.includes(\"Invalid URL\")\n                        ) {\n                            clearInterval(interval);\n                            return reject(\n                                new Error(`Malformed transaction ID: ${text}`),\n                            );\n                        }\n\n                        // Log and continue polling for 404s or 5XX errors in case a tx doesn't exist yet\n                        console.warn(\n                            \"Non-OK response (retrying):\",\n                            res.status,\n                            text,\n                        );\n                        return;\n                    }\n\n                    const data = parseJSON(await res.text());\n                    if (data?.status === \"accepted\") {\n                        clearInterval(interval);\n                        return resolve(data);\n                    }\n\n                    if (data?.status === \"rejected\") {\n                        clearInterval(interval);\n                        return reject(\n                            new Error(\n                                `Transaction ${transactionId} was rejected by the network. Ensure that the account paying the fee has enough credits and that the inputs to the on-chain function are valid.`,\n                            ),\n                        );\n                    }\n                } catch (err) {\n                    console.error(\"Polling error:\", err);\n                }\n            }, checkInterval);\n        });\n    }\n}\n\nexport { AleoNetworkClient, AleoNetworkClientOptions, ProgramImports };\n","import {VerifyingKey, Metadata} from \"./wasm.js\";\n\nexport const KEY_STORE = Metadata.baseUrl();\n\nexport interface Key {\n    name: string,\n    locator: string,\n    prover: string,\n    verifier: string,\n    verifyingKey: () => VerifyingKey,\n}\n\nfunction convert(metadata: Metadata): Key {\n    // This looks up the method name in VerifyingKey\n    const verifyingKey = (VerifyingKey as any)[metadata.verifyingKey];\n\n    if (!verifyingKey) {\n        throw new Error(\"Invalid method name: \" + metadata.verifyingKey);\n    }\n\n    return {\n        name: metadata.name,\n        locator: metadata.locator,\n        prover: metadata.prover,\n        verifier: metadata.verifier,\n        verifyingKey,\n    };\n}\n\nexport const CREDITS_PROGRAM_KEYS = {\n    bond_public: convert(Metadata.bond_public()),\n    bond_validator: convert(Metadata.bond_validator()),\n    claim_unbond_public: convert(Metadata.claim_unbond_public()),\n    fee_private: convert(Metadata.fee_private()),\n    fee_public: convert(Metadata.fee_public()),\n    inclusion: convert(Metadata.inclusion()),\n    join: convert(Metadata.join()),\n    set_validator_state: convert(Metadata.set_validator_state()),\n    split: convert(Metadata.split()),\n    transfer_private: convert(Metadata.transfer_private()),\n    transfer_private_to_public: convert(Metadata.transfer_private_to_public()),\n    transfer_public: convert(Metadata.transfer_public()),\n    transfer_public_as_signer: convert(Metadata.transfer_public_as_signer()),\n    transfer_public_to_private: convert(Metadata.transfer_public_to_private()),\n    unbond_public: convert(Metadata.unbond_public()),\n    getKey: function(key: string): Key {\n        if (this.hasOwnProperty(key)) {\n            return (this as any)[key] as Key;\n        } else {\n            throw new Error(`Key \"${key}\" not found.`);\n        }\n    }\n};\n\nexport const PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\n\nexport const VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"transfer_public_as_signer\",\n    \"public\",\n    \"public_as_signer\",\n    \"transferPublic\",\n    \"transferPublicAsSigner\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"publicAsSigner\",\n    \"transferPublicToPrivate\",\n]);\n\nexport const PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\n\nexport const PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\n\nexport const PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\n\nexport const PUBLIC_TRANSFER_AS_SIGNER = new Set([\n    \"public_as_signer\",\n    \"transfer_public_as_signer\",\n    \"transferPublicAsSigner\",\n]);\n\nexport const PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n","import {\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    Key,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER,\n} from \"./constants.js\";\n\nimport {\n    ProvingKey,\n    VerifyingKey,\n} from \"./wasm.js\";\n\nimport { get } from \"./utils.js\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    name: string | undefined;\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string, name?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n        this.name = params.name;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get bond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_validator function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair>;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    unBondPublicKeys(): Promise<FunctionKeyPair>;\n\n}\n\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n        const response = await get(url);\n        const data = await response.arrayBuffer();\n        return new Uint8Array(data);\n        } catch (error: any) {\n            throw new Error(\"Error fetching data.\" + error.message);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            throw new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"name\" in params && typeof params[\"name\"] == \"string\") {\n                let key = CREDITS_PROGRAM_KEYS.getKey(params[\"name\"]);\n                return this.fetchCreditsKeys(key);\n            }\n\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchRemoteKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw new Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\n     *     CREDITS_PROGRAM_KEYS.transfer_private.prover,\n     *     CREDITS_PROGRAM_KEYS.transfer_private.verifier,\n     * );\n     */\n    async fetchRemoteKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /***\n     * Fetches the proving key from a remote source.\n     *\n     * @param proverUrl\n     * @param cacheKey\n     *\n     * @returns {Promise<ProvingKey>} Proving key for the specified program\n     */\n    async fetchProvingKey(proverUrl: string, cacheKey?: string): Promise<ProvingKey> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return ProvingKey.fromBytes(value[0]);\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                    return provingKey;\n                }\n            }\n            else {\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                return provingKey;\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving keys from ${proverUrl}`);\n        }\n    }\n\n    async fetchCreditsKeys(key: Key): Promise<FunctionKeyPair> {\n        try {\n            if (!this.cache.has(key.locator) || !this.cacheOption) {\n                const verifying_key = key.verifyingKey()\n                const proving_key = <ProvingKey>await this.fetchProvingKey(key.prover, key.locator);\n                if (this.cacheOption) {\n                    this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [proving_key.toBytes(), verifying_key.toBytes()]);\n                }\n                return [proving_key, verifying_key];\n            } else {\n                const keyPair = <CachedKeyPair>this.cache.get(key.locator);\n                return [ProvingKey.fromBytes(keyPair[0]), VerifyingKey.fromBytes(keyPair[1])];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: fetching credits.aleo keys: ${error.message}`);\n        }\n    }\n\n    async bondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_public);\n    }\n\n    bondValidatorKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_validator);\n    }\n\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.claim_unbond_public)\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public);\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_as_signer);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.join);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.split);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_private);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_public);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUri: string): Promise<VerifyingKey> {\n        switch (verifierUri) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.bond_validator.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_validator.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return CREDITS_PROGRAM_KEYS.inclusion.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return CREDITS_PROGRAM_KEYS.join.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.verifier:\n                return CREDITS_PROGRAM_KEYS.set_validator_state.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return CREDITS_PROGRAM_KEYS.split.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey();\n            default:\n                try {\n                    /// Try to fetch the verifying key from the network as a string\n                    const response = await get(verifierUri);\n                    const text = await response.text();\n                    return <VerifyingKey>VerifyingKey.fromString(text);\n                } catch (e) {\n                    /// If that fails, try to fetch the verifying key from the network as bytes\n                    try {\n                    return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUri));\n                    } catch (inner: any) {\n                        throw new Error(\"Invalid verifying key. Error: \" + inner.message);\n                    }\n                }\n        }\n    }\n\n    unBondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.unbond_public);\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import {\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider.js\";\n\nimport {\n    ProvingKey,\n    VerifyingKey,\n} from \"./wasm.js\";\n\nimport {\n    CREDITS_PROGRAM_KEYS,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER,\n} from \"./constants.js\";\n\n/**\n * Search parameters for the offline key provider. This class implements the KeySearchParams interface and includes\n * a convenience method for creating a new instance of this class for each function of the credits.aleo program.\n *\n * @example\n * // If storing a key for a custom program function\n * offlineSearchParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n *\n * // If storing a key for a credits.aleo program function\n * bondPublicKeyParams = OfflineSearchParams.bondPublicKeyParams();\n */\nclass OfflineSearchParams implements KeySearchParams {\n    cacheKey: string | undefined;\n    verifyCreditsKeys: boolean | undefined;\n\n    /**\n     * Create a new OfflineSearchParams instance.\n     *\n     * @param {string} cacheKey - Key used to store the local function proving & verifying keys. This should be stored\n     * under the naming convention \"programName/functionName\" (i.e. \"myprogram.aleo/myfunction\")\n     * @param {boolean} verifyCreditsKeys - Whether to verify the keys against the credits.aleo program,\n     * defaults to false, but should be set to true if using keys from the credits.aleo program\n     */\n    constructor(cacheKey: string, verifyCreditsKeys = false) {\n        this.cacheKey = cacheKey;\n        this.verifyCreditsKeys = verifyCreditsKeys;\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the bond_public function of the credits.aleo program.\n     */\n    static bondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.bond_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the bond_validator function of the credits.aleo program.\n     */\n    static bondValidatorKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.bond_validator.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the claim_unbond_public function of the\n     */\n    static claimUnbondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.claim_unbond_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the fee_private function of the credits.aleo program.\n     */\n    static feePrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.fee_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the fee_public function of the credits.aleo program.\n     */\n    static feePublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.fee_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the inclusion prover function.\n     */\n    static inclusionKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.inclusion.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the join function of the credits.aleo program.\n     */\n    static joinKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.join.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the set_validator_state function of the credits.aleo program.\n     */\n    static setValidatorStateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.set_validator_state.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the split function of the credits.aleo program.\n     */\n    static splitKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.split.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private function of the credits.aleo program.\n     */\n    static transferPrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private_to_public function of the credits.aleo program.\n     */\n    static transferPrivateToPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public function of the credits.aleo program.\n     */\n    static transferPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public_as_signer function of the credits.aleo program.\n     */\n    static transferPublicAsSignerKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public_as_signer.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public_to_private function of the credits.aleo program.\n     */\n    static transferPublicToPrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the unbond_public function of the credits.aleo program.\n     */\n    static unbondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.unbond_public.locator, true);\n    }\n}\n\n/**\n * A key provider meant for building transactions offline on devices such as hardware wallets. This key provider is not\n * able to contact the internet for key material and instead relies on the user to insert Aleo function proving &\n * verifying keys from local storage prior to usage.\n *\n * @example\n * // Create an offline program manager\n * const programManager = new ProgramManager();\n *\n * // Create a temporary account for the execution of the program\n * const account = new Account();\n * programManager.setAccount(account);\n *\n * // Create the proving keys from the key bytes on the offline machine\n * console.log(\"Creating proving keys from local key files\");\n * const program = \"program hello_hello.aleo; function hello: input r0 as u32.public; input r1 as u32.private; add r0 r1 into r2; output r2 as u32.private;\";\n * const myFunctionProver = await getLocalKey(\"/path/to/my/function/hello_hello.prover\");\n * const myFunctionVerifier = await getLocalKey(\"/path/to/my/function/hello_hello.verifier\");\n * const feePublicProvingKeyBytes = await getLocalKey(\"/path/to/credits.aleo/feePublic.prover\");\n *\n * myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProver);\n * myFunctionVerifyingKey = VerifyingKey.fromBytes(myFunctionVerifier);\n * const feePublicProvingKey = ProvingKey.fromBytes(feePublicKeyBytes);\n *\n * // Create an offline key provider\n * console.log(\"Creating offline key provider\");\n * const offlineKeyProvider = new OfflineKeyProvider();\n *\n * // Cache the keys\n * // Cache the proving and verifying keys for the custom hello function\n * OfflineKeyProvider.cacheKeys(\"hello_hello.aleo/hello\", myFunctionProvingKey, myFunctionVerifyingKey);\n *\n * // Cache the proving key for the fee_public function (the verifying key is automatically cached)\n * OfflineKeyProvider.insertFeePublicKey(feePublicProvingKey);\n *\n * // Create an offline query using the latest state root in order to create the inclusion proof\n * const offlineQuery = new OfflineQuery(\"latestStateRoot\");\n *\n * // Insert the key provider into the program manager\n * programManager.setKeyProvider(offlineKeyProvider);\n *\n * // Create the offline search params\n * const offlineSearchParams = new OfflineSearchParams(\"hello_hello.aleo/hello\");\n *\n * // Create the offline transaction\n * const offlineExecuteTx = <Transaction>await this.buildExecutionTransaction(\"hello_hello.aleo\", \"hello\", 1, false, [\"5u32\", \"5u32\"], undefined, offlineSearchParams, undefined, undefined, undefined, undefined, offlineQuery, program);\n *\n * // Broadcast the transaction later on a machine with internet access\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n * const txId = await networkClient.broadcastTransaction(offlineExecuteTx);\n */\nclass OfflineKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n\n    constructor() {\n        this.cache = new Map<string, CachedKeyPair>();\n    }\n\n    /**\n     * Get bond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.bondPublicKeyParams());\n    };\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.bondValidatorKeyParams());\n    };\n\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    };\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.claimUnbondPublicKeyParams());\n    };\n\n    /**\n     * Get arbitrary function key from the offline key provider cache.\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * /// First cache the keys from local offline resources\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     * const myFunctionVerifyingKey = VerifyingKey.fromString(\"verifier...\");\n     * const myFunctionProvingKeyBytes = await readBinaryFile('./resources/myfunction.prover');\n     * const myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProvingKeyBytes);\n     *\n     * /// Cache the keys for future use with a memorable locator\n     * offlineKeyProvider.cacheKeys(\"myprogram.aleo/myfunction\", [myFunctionProvingKey, myFunctionVerifyingKey]);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     *\n     * /// First create a search parameter object with the same locator used to cache the keys\n     * const keyParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n     *\n     * /// Then retrieve the keys\n     * const [myFunctionProver, myFunctionVerifier] = await offlineKeyProvider.functionKeys(keyParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair> {\n        return new Promise((resolve, reject) => {\n            if (params === undefined) {\n                reject(new Error(\"No search parameters provided, cannot retrieve keys\"));\n            } else {\n                const keyId = params.cacheKey;\n                const verifyCreditsKeys = params.verifyCreditsKeys;\n                if (this.cache.has(keyId)) {\n                    const [provingKeyBytes, verifyingKeyBytes] = this.cache.get(keyId) as CachedKeyPair;\n                    const provingKey = ProvingKey.fromBytes(provingKeyBytes);\n                    const verifyingKey = VerifyingKey.fromBytes(verifyingKeyBytes);\n                    if (verifyCreditsKeys) {\n                        const keysMatchExpected = this.verifyCreditsKeys(keyId, provingKey, verifyingKey)\n                        if (!keysMatchExpected) {\n                            reject (new Error(`Cached keys do not match expected keys for ${keyId}`));\n                        }\n                    }\n                    resolve([provingKey, verifyingKey]);\n                } else {\n                    reject(new Error(\"Keys not found in cache for \" + keyId));\n                }\n            }\n        });\n    };\n\n    /**\n     * Determines if the keys for a given credits function match the expected keys.\n     *\n     * @returns {boolean} Whether the keys match the expected keys\n     */\n    verifyCreditsKeys(locator: string, provingKey: ProvingKey, verifyingKey: VerifyingKey): boolean {\n        switch (locator) {\n            case CREDITS_PROGRAM_KEYS.bond_public.locator:\n                return provingKey.isBondPublicProver() && verifyingKey.isBondPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.locator:\n                return provingKey.isClaimUnbondPublicProver() && verifyingKey.isClaimUnbondPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.fee_private.locator:\n                return provingKey.isFeePrivateProver() && verifyingKey.isFeePrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.fee_public.locator:\n                return provingKey.isFeePublicProver() && verifyingKey.isFeePublicVerifier();\n            case CREDITS_PROGRAM_KEYS.inclusion.locator:\n                return provingKey.isInclusionProver() && verifyingKey.isInclusionVerifier();\n            case CREDITS_PROGRAM_KEYS.join.locator:\n                return provingKey.isJoinProver() && verifyingKey.isJoinVerifier();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.locator:\n                return provingKey.isSetValidatorStateProver() && verifyingKey.isSetValidatorStateVerifier();\n            case CREDITS_PROGRAM_KEYS.split.locator:\n                return provingKey.isSplitProver() && verifyingKey.isSplitVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_private.locator:\n                return provingKey.isTransferPrivateProver() && verifyingKey.isTransferPrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator:\n                return provingKey.isTransferPrivateToPublicProver() && verifyingKey.isTransferPrivateToPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_public.locator:\n                return provingKey.isTransferPublicProver() && verifyingKey.isTransferPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator:\n                return provingKey.isTransferPublicToPrivateProver() && verifyingKey.isTransferPublicToPrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.unbond_public.locator:\n                return provingKey.isUnbondPublicProver() && verifyingKey.isUnbondPublicVerifier();\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Get fee_private function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.feePrivateKeyParams());\n    };\n\n    /**\n     * Get fee_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.feePublicKeyParams());\n    };\n\n    /**\n     * Get join function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.joinKeyParams());\n    };\n\n    /**\n     * Get split function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.splitKeyParams());\n    };\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program.\n     *\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new OfflineKeyProvider\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     *\n     * // Cache the keys for future use with the official locator\n     * const transferPublicProvingKeyBytes = await readBinaryFile('./resources/transfer_public.prover.a74565e');\n     * const transferPublicProvingKey = ProvingKey.fromBytes(transferPublicProvingKeyBytes);\n     *\n     * // Cache the transfer_public keys for future use with the OfflinKeyProvider's convenience method for\n     * // transfer_public (the verifying key will be cached automatically)\n     * offlineKeyProvider.insertTransferPublicKeys(transferPublicProvingKey);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateKeyParams());\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateToPublicKeyParams());\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicKeyParams());\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicAsSignerKeyParams());\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicToPrivateKeyParams());\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    };\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    async unBondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.unbondPublicKeyParams());\n    };\n\n    /**\n     * Insert the proving and verifying keys for the bond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for bond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertBondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isBondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [provingKey.toBytes(), VerifyingKey.bondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for bond_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the claim_unbond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for claim_unbond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertClaimUnbondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isClaimUnbondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.claim_unbond_public.locator, [provingKey.toBytes(), VerifyingKey.claimUnbondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for claim_unbond_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the fee_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isFeePrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.fee_private.locator, [provingKey.toBytes(), VerifyingKey.feePrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_private\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the fee_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isFeePublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.fee_public.locator, [provingKey.toBytes(), VerifyingKey.feePublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the join function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for join before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertJoinKeys(provingKey: ProvingKey) {\n        if (provingKey.isJoinProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.join.locator, [provingKey.toBytes(), VerifyingKey.joinVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for join\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the set_validator_state function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for set_validator_state before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSetValidatorStateKeys(provingKey: ProvingKey) {\n        if (provingKey.isSetValidatorStateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.set_validator_state.locator, [provingKey.toBytes(), VerifyingKey.setValidatorStateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for set_validator_state\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the split function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for split before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSplitKeys(provingKey: ProvingKey) {\n        if (provingKey.isSplitProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.split.locator, [provingKey.toBytes(), VerifyingKey.splitVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for split\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_private.locator, [provingKey.toBytes(), VerifyingKey.transferPrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_private_to_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private_to_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateToPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPrivateToPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator, [provingKey.toBytes(), VerifyingKey.transferPrivateToPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private_to_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_public.locator, [provingKey.toBytes(), VerifyingKey.transferPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_public_to_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public_to_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicToPrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPublicToPrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator, [provingKey.toBytes(), VerifyingKey.transferPublicToPrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public_to_private\");\n        }\n    }\n\n    insertUnbondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isUnbondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.unbond_public.locator, [provingKey.toBytes(), VerifyingKey.unbondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for unbond_public\");\n        }\n    }\n}\n\n\nexport {OfflineKeyProvider, OfflineSearchParams}\n","import { RecordPlaintext } from \"./wasm.js\";\nimport { logAndThrow } from \"./utils.js\";\nimport { Account } from \"./account.js\";\nimport { AleoNetworkClient } from \"./network-client.js\";\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface RecordSearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * Interface for a record provider. A record provider is used to find records for use in deployment and execution\n * transactions on the Aleo Network. A default implementation is provided by the NetworkRecordProvider class. However,\n * a custom implementation can be provided (say if records are synced locally to a database from the network) by\n * implementing this interface.\n */\ninterface RecordProvider {\n    account: Account\n\n    /**\n     * Find a credits.aleo record with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, its nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const record2 = await recordProvider.findCreditsRecord(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecord(microcredits: number, unspent: boolean,  nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext>;\n\n    /**\n     * Find a list of credit.aleo records with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcreditAmounts A list of separate microcredit amounts to search for (e.g. [5000, 100000])\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext[]>} A list of records with a value greater or equal to the amounts specified if such records exist, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const records = await recordProvider.findCreditsRecords([5000, 5000], true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const nonces = [];\n     * records.forEach(record => { nonces.push(record.nonce()) });\n     * const records2 = await recordProvider.findCreditsRecord(5000, true, nonces);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecords(microcreditAmounts: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]>;\n\n    /**\n     * Find an arbitrary record\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     program: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.program = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, \"credits.aleo\", \"credits\");\n     *\n     * const record = await recordProvider.findRecord(true, [], params);\n     */\n    findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext>;\n\n    /**\n     * Find multiple records from arbitrary programs\n     *\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     maxRecords: number;\n     *     programName: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.maxRecords = maxRecords;\n     *         this.programName = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, 2, \"credits.aleo\", \"credits\");\n     * const records = await recordProvider.findRecord(true, [], params);\n     */\n    findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]>;\n}\n\n/**\n * A record provider implementation that uses the official Aleo API to find records for usage in program execution and\n * deployment, wallet functionality, and other use cases.\n */\nclass NetworkRecordProvider implements RecordProvider {\n    account: Account;\n    networkClient: AleoNetworkClient;\n    constructor(account: Account, networkClient: AleoNetworkClient) {\n        this.account = account;\n        this.networkClient = networkClient;\n    }\n\n    /**\n     * Set the account used to search for records\n     *\n     * @param {Account} account The account to use for searching for records\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Find a list of credit records with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number[]} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * */\n    async findCreditsRecords(microcredits: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]> {\n        let startHeight = 0;\n        let endHeight = 0;\n        let maxAmount = undefined;\n\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"startHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n\n            if (\"amounts\" in searchParameters && Array.isArray(searchParameters[\"amounts\"]) && searchParameters[\"amount\"].every((item: any) => typeof item === 'number')) {\n                microcredits = searchParameters[\"amounts\"];\n            }\n\n            if (\"maxAmount\" in searchParameters && typeof searchParameters[\"maxAmount\"] == \"number\") {\n                maxAmount = searchParameters[\"maxAmount\"];\n            }\n\n            if (\"unspent\" in searchParameters && typeof searchParameters[\"unspent\"] == \"boolean\") {\n                unspent = searchParameters[\"unspent\"]\n            }\n        }\n\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            endHeight = end;\n        }\n\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            logAndThrow(\"Start height must be less than end height\");\n        }\n\n        return await this.networkClient.findRecords(startHeight, endHeight, unspent, [\"credits.aleo\"], microcredits, maxAmount, nonces, this.account.privateKey());\n    }\n\n    /**\n     * Find a credit record with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    async findCreditsRecord(microcredits: number, unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext> {\n        let records = null;\n\n        try {\n            records = await this.findCreditsRecords([microcredits], unspent, nonces, searchParameters);\n        } catch (e) {\n            console.log(\"No records found with error:\", e);\n        }\n\n        if (records && records.length > 0) {\n            return records[0];\n        }\n\n        console.error(\"Record not found with error:\", records);\n        throw new Error(\"Record not found\");\n    }\n\n    /**\n     * Find an arbitrary record. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext> {\n        throw new Error(\"Not implemented\");\n    }\n\n    /**\n     * Find multiple records from a specified program.\n     */\n    async findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]> {\n        let startHeight = 0;\n        let endHeight = 0;\n        let amounts = undefined;\n        let maxAmount = undefined;\n        let programs = undefined;\n\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"startHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n\n            if (\"amounts\" in searchParameters && Array.isArray(searchParameters[\"amounts\"]) && searchParameters[\"amounts\"].every((item: any) => typeof item === 'number')) {\n                amounts = searchParameters[\"amounts\"];\n            }\n\n            if (\"maxAmount\" in searchParameters && typeof searchParameters[\"maxAmount\"] == \"number\") {\n                maxAmount = searchParameters[\"maxAmount\"];\n            }\n\n            if (\"nonces\" in searchParameters && Array.isArray(searchParameters[\"nonces\"]) && searchParameters[\"nonces\"].every((item: any) => typeof item === \"string\")) {\n                nonces = searchParameters[\"nonces\"];\n            }\n\n            if (\"program\" in searchParameters && typeof searchParameters[\"program\"] == \"string\") {\n                programs = [searchParameters[\"program\"]];\n            }\n\n            if (\"programs\" in searchParameters && Array.isArray(searchParameters[\"programs\"]) && searchParameters[\"programs\"].every((item: any) => typeof item === \"string\")) {\n                programs = searchParameters[\"programs\"];\n            }\n\n            if (\"unspent\" in searchParameters && typeof searchParameters[\"unspent\"] == \"boolean\") {\n                unspent = searchParameters[\"unspent\"]\n            }\n        }\n\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            endHeight = end;\n        }\n\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            logAndThrow(\"Start height must be less than end height\");\n        }\n\n        return await this.networkClient.findRecords(startHeight, endHeight, unspent, programs, amounts, maxAmount, nonces, this.account.privateKey());\n    }\n\n}\n\n/**\n * BlockHeightSearch is a RecordSearchParams implementation that allows for searching for records within a given\n * block height range.\n *\n * @example\n * // Create a new BlockHeightSearch\n * const params = new BlockHeightSearch(89995, 99995);\n *\n * // Create a new NetworkRecordProvider\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n * const keyProvider = new AleoKeyProvider();\n * const recordProvider = new NetworkRecordProvider(account, networkClient);\n *\n * // The record provider can be used to find records with a given number of microcredits and the block height search\n * // can be used to find records within a given block height range\n * const record = await recordProvider.findCreditsRecord(5000, true, [], params);\n *\n */\nclass BlockHeightSearch implements RecordSearchParams {\n    startHeight: number;\n    endHeight: number;\n    constructor(startHeight: number, endHeight: number) {\n        this.startHeight = startHeight;\n        this.endHeight = endHeight;\n    }\n}\n\nexport { BlockHeightSearch, NetworkRecordProvider, RecordProvider, RecordSearchParams};\n","import { Account } from \"./account.js\";\nimport { AleoNetworkClient, AleoNetworkClientOptions, ProgramImports } from \"./network-client.js\";\nimport { ImportedPrograms, ImportedVerifyingKeys } from \"./models/imports.js\";\nimport { RecordProvider, RecordSearchParams } from \"./record-provider.js\";\n\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider.js\";\n\nimport {\n    Address,\n    Authorization,\n    ExecutionResponse,\n    Execution as FunctionExecution,\n    OfflineQuery,\n    RecordPlaintext,\n    PrivateKey,\n    Program,\n    ProvingKey,\n    ProvingRequest,\n    VerifyingKey,\n    Transaction,\n    ProgramManager as WasmProgramManager,\n    verifyFunctionExecution,\n} from \"./wasm.js\";\n\nimport {\n    CREDITS_PROGRAM_KEYS,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n} from \"./constants.js\";\n\nimport { logAndThrow } from \"./utils.js\";\n\n/**\n * Represents the options for executing a transaction in the Aleo network.\n * This interface is used to specify the parameters required for building and submitting an execution transaction.\n *\n * @property {string} programName - The name of the program containing the function to be executed.\n * @property {string} functionName - The name of the function to execute within the program.\n * @property {number} priorityFee - The optional priority fee to be paid for the transaction.\n * @property {boolean} privateFee - If true, uses a private record to pay the fee; otherwise, uses the account's public credit balance.\n * @property {string[]} inputs - The inputs to the function being executed.\n * @property {RecordSearchParams} [recordSearchParams] - Optional parameters for searching for a record to pay the execution transaction fee.\n * @property {KeySearchParams} [keySearchParams] - Optional parameters for finding the matching proving & verifying keys for the function.\n * @property {string | RecordPlaintext} [feeRecord] - Optional fee record to use for the transaction.\n * @property {ProvingKey} [provingKey] - Optional proving key to use for the transaction.\n * @property {VerifyingKey} [verifyingKey] - Optional verifying key to use for the transaction.\n * @property {PrivateKey} [privateKey] - Optional private key to use for the transaction.\n * @property {OfflineQuery} [offlineQuery] - Optional offline query if creating transactions in an offline environment.\n * @property {string | Program} [program] - Optional program source code to use for the transaction.\n * @property {ProgramImports} [imports] - Optional programs that the program being executed imports.\n */\ninterface ExecuteOptions {\n    programName: string;\n    functionName: string;\n    priorityFee: number;\n    privateFee: boolean;\n    inputs: string[];\n    recordSearchParams?: RecordSearchParams;\n    keySearchParams?: KeySearchParams;\n    feeRecord?: string | RecordPlaintext;\n    provingKey?: ProvingKey;\n    verifyingKey?: VerifyingKey;\n    privateKey?: PrivateKey;\n    offlineQuery?: OfflineQuery;\n    program?: string | Program;\n    imports?: ProgramImports;\n    edition?: number,\n}\n\n/**\n * Options for building an Authorization for a function.\n *\n * @property programName {string} Name of the program containing the function to build the authorization for.\n * @property functionName {string} Name of the function name to build the authorization for.\n * @property inputs {string[]} The inputs to the function.\n * @property programSource {string | Program} The optional source code for the program to build an execution for.\n * @property privateKey {PrivateKey} Optional private key to use to build the authorization.\n * @property programImports {ProgramImports} The other programs the program imports.\n */\ninterface AuthorizationOptions {\n    programName: string;\n    functionName: string;\n    inputs: string[];\n    programSource?: string | Program;\n    privateKey?: PrivateKey;\n    programImports?: ProgramImports;\n    edition?: number,\n}\n\n/**\n * Options for executing a fee authorization.\n *\n * @property deploymentOrExecutionId {string} The id of a previously built Execution or Authorization.\n * @property baseFeeCredits {number} The number of Aleo Credits to pay for the base fee.\n * @property priorityFeeCredits {number} The number of Aleo Credits to pay for the priority fee.\n * @property privateKey {PrivateKey} Optional private key to specify for the authorization.\n * @property feeRecord {RecordPlaintext} A record to specify to pay the private fee. If this is specified a `fee_private` authorization will be built.\n */\ninterface FeeAuthorizationOptions {\n    deploymentOrExecutionId: string,\n    baseFeeCredits: number,\n    priorityFeeCredits?: number,\n    privateKey?: PrivateKey,\n    feeRecord?: RecordPlaintext,\n}\n\n/**\n * Represents the options for executing a transaction in the Aleo network.\n * This interface is used to specify the parameters required for building and submitting an execution transaction.\n *\n * @property {string} programName - The name of the program containing the function to be executed.\n * @property {string} functionName - The name of the function to execute within the program.\n * @property {number} baseFee - The base fee to be paid for the transaction.\n * @property {number} priorityFee - The optional priority fee to be paid for the transaction.\n * @property {boolean} privateFee - If true, uses a private record to pay the fee; otherwise, uses the account's public credit balance.\n * @property {string[]} inputs - The inputs to the function being executed.\n * @property {RecordSearchParams} [recordSearchParams] - Optional parameters for searching for a record to pay the execution transaction fee.\n * @property {string | RecordPlaintext} [feeRecord] - Optional fee record to use for the transaction.\n * @property {PrivateKey} [privateKey] - Optional private key to use for the transaction.\n * @property {string | Program} [program] - Optional program source code to use for the transaction.\n * @property {string} uri - The URI send the ProvingRequest to.\n * @property {ProgramImports} [imports] - Optional programs that the program being executed imports.\n * @property {boolean} broadcast - Whether to broadcast the Transaction generated by the remove prover to the Aleo network.\n */\ninterface ProvingRequestOptions {\n    programName: string;\n    functionName: string;\n    baseFee: number,\n    priorityFee: number;\n    privateFee: boolean;\n    inputs: string[];\n    recordSearchParams?: RecordSearchParams;\n    feeRecord?: string | RecordPlaintext;\n    privateKey?: PrivateKey;\n    programSource?: string | Program;\n    programImports?: ProgramImports;\n    broadcast?: boolean;\n    unchecked?: boolean;\n    edition?: number,\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(\n        host?: string | undefined,\n        keyProvider?: FunctionKeyProvider | undefined,\n        recordProvider?: RecordProvider | undefined,\n        networkClientOptions?: AleoNetworkClientOptions | undefined,\n    ) {\n        this.host = host ? host : \"https://api.explorer.provable.com/v1\";\n        this.networkClient = new AleoNetworkClient(this.host, networkClientOptions);\n\n        this.keyProvider = keyProvider ? keyProvider : new AleoKeyProvider();\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Check if the fee is sufficient to pay for the transaction\n     */\n    async checkFee(address: string, feeAmount: bigint) {\n        const balance =\n            BigInt(await this.networkClient.getPublicBalance(address));\n        if (feeAmount > balance) {\n            throw Error(\n                `The desired execution requires a fee of ${feeAmount} microcredits, but the account paying the fee has ${balance} microcredits available.`,\n            );\n        }\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set a header in the `AleoNetworkClient`s header map\n     *\n     * @param {string} headerName The name of the header to set\n     * @param {string} value The header value\n     *\n     * @example\n     * import { ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a ProgramManager\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\");\n     *\n     * // Set the value of the `Accept-Language` header to `en-US`\n     * programManager.setHeader('Accept-Language', 'en-US');\n     */\n    setHeader(headerName: string, value: string) {\n        this.networkClient.headers[headerName] = value;\n    }\n\n    /**\n     * Remove a header from the `AleoNetworkClient`s header map\n     *\n     * @param {string} headerName The name of the header to be removed\n     *\n     * @example\n     * import { ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a ProgramManager\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\");\n     *\n     * // Remove the default `X-Aleo-SDK-Version` header\n     * programManager.removeHeader('X-Aleo-SDK-Version');\n     */\n    removeHeader(headerName: string) {\n        delete this.networkClient.headers[headerName]\n    }\n\n    /**\n     * Builds a deployment transaction for submission to the Aleo network.\n     *\n     * @param {string} program Program source code\n     * @param {number} priorityFee The optional priority fee to be paid for that transaction.\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.setAccount(Account);\n     *\n     * // Define a fee in credits\n     * const priorityFee = 0.0;\n     *\n     * // Create the deployment transaction.\n     * const tx = await programManager.buildDeploymentTransaction(program, fee, false);\n     * await programManager.networkClient.submitTransaction(tx);\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx.id());\n     *  assert(transaction.id() === tx.id());\n     * }, 20000);\n     */\n    async buildDeploymentTransaction(\n        program: string,\n        priorityFee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<Transaction> {\n        // Ensure the program is valid.\n        let programObject;\n        try {\n            programObject = Program.fromString(program);\n        } catch (e: any) {\n            logAndThrow(\n                `Error parsing program: '${e.message}'. Please ensure the program is valid.`,\n            );\n        }\n\n        // Ensure the program is valid and does not exist on the network\n        try {\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(\n                    programObject.id(),\n                );\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(\n                    `Program ${programObject.id()} does not exist on the network, deploying...`,\n                );\n            }\n            if (typeof programSource === \"string\") {\n                throw Error(`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e: any) {\n            logAndThrow(`Error validating program: ${e.message}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (\n            typeof privateKey === \"undefined\" &&\n            typeof this.account !== \"undefined\"\n        ) {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw \"No private key provided and no private key set in the ProgramManager\";\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee\n                ? <RecordPlaintext>(\n                    await this.getCreditsRecord(\n                        priorityFee,\n                        [],\n                        feeRecord,\n                        recordSearchParams,\n                    )\n                )\n                : undefined;\n        } catch (e: any) {\n            logAndThrow(\n                `Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`,\n            );\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee\n                ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys()\n                : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(\n                `Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`,\n            );\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e: any) {\n            logAndThrow(\n                `Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`,\n            );\n        }\n\n        // Build a deployment transaction\n        return await WasmProgramManager.buildDeploymentTransaction(\n            deploymentPrivateKey,\n            program,\n            priorityFee,\n            feeRecord,\n            this.host,\n            imports,\n            feeProvingKey,\n            feeVerifyingKey,\n        );\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} priorityFee The optional fee to be paid for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to used pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider.\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const priorityFee = 0.0;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee, false);\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx_id);\n     *  assert(transaction.id() === tx_id);\n     * }, 20000);\n     */\n    async deploy(\n        program: string,\n        priorityFee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string> {\n        const tx = <Transaction>(\n            await this.buildDeploymentTransaction(\n                program,\n                priorityFee,\n                privateFee,\n                recordSearchParams,\n                feeRecord,\n                privateKey,\n            )\n        );\n\n        let feeAddress;\n\n        if (typeof privateKey !== \"undefined\") {\n            feeAddress = Address.from_private_key(privateKey);\n        } else if (this.account !== undefined) {\n            feeAddress = this.account?.address();\n        } else {\n            throw Error(\n                \"No private key provided and no private key set in the ProgramManager. Please set an account or provide a private key.\",\n            );\n        }\n\n        // Check if the account has sufficient credits to pay for the transaction\n        await this.checkFee(feeAddress.to_string(), tx.feeAmount());\n\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider.\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const tx = await programManager.buildExecutionTransaction({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   priorityFee: 0.0,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     *\n     * // Submit the transaction to the network\n     * await programManager.networkClient.submitTransaction(tx.toString());\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx.id());\n     *  assert(transaction.id() === tx.id());\n     * }, 10000);\n     */\n    async buildExecutionTransaction(\n        options: ExecuteOptions,\n    ): Promise<Transaction> {\n        // Destructure the options object to access the parameters\n        const {\n            functionName,\n            priorityFee,\n            privateFee,\n            inputs,\n            recordSearchParams,\n            keySearchParams,\n            privateKey,\n            offlineQuery,\n        } = options;\n\n        let feeRecord = options.feeRecord;\n        let provingKey = options.provingKey;\n        let verifyingKey = options.verifyingKey;\n        let program = options.program;\n        let programName = options.programName;\n        let imports = options.imports;\n        let edition = options.edition;\n\n        // Ensure the function exists on the network\n        if (program === undefined) {\n            try {\n                program = <string>(\n                    await this.networkClient.getProgram(programName)\n                );\n            } catch (e: any) {\n                logAndThrow(\n                    `Error finding ${programName}. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`,\n                );\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the program name if it is not provided in the parameters.\n        if (programName === undefined) {\n            programName = Program.fromString(program).id();\n        }\n\n        if (edition == undefined) {\n            try {\n\n                edition = await this.networkClient.getLatestProgramEdition(programName);\n            } catch (e: any) {\n                console.warn(`Error finding edition for ${programName}. Network response: '${e.message}'. Assuming edition 1.`);\n                edition = 1;\n            }\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (\n            typeof privateKey === \"undefined\" &&\n            typeof this.account !== \"undefined\"\n        ) {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw \"No private key provided and no private key set in the ProgramManager\";\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee\n                ? <RecordPlaintext>(\n                    await this.getCreditsRecord(\n                        priorityFee,\n                        [],\n                        feeRecord,\n                        recordSearchParams,\n                    )\n                )\n                : undefined;\n        } catch (e: any) {\n            logAndThrow(\n                `Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`,\n            );\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee\n                ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys()\n                : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(\n                `Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`,\n            );\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>(\n                    await this.keyProvider.functionKeys(keySearchParams)\n                );\n            } catch (e) {\n                console.log(\n                    `Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`,\n                );\n            }\n        }\n\n        // Resolve the program imports if they exist\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>(\n                    await this.networkClient.getProgramImports(programName)\n                );\n            } catch (e: any) {\n                logAndThrow(\n                    `Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`,\n                );\n            }\n        }\n\n        // Build an execution transaction\n        return await WasmProgramManager.buildExecutionTransaction(\n            executionPrivateKey,\n            program,\n            functionName,\n            inputs,\n            priorityFee,\n            feeRecord,\n            this.host,\n            imports,\n            provingKey,\n            verifyingKey,\n            feeProvingKey,\n            feeVerifyingKey,\n            offlineQuery,\n            edition\n        );\n    }\n\n    /**\n     * Builds a SnarkVM `Authorization` for a specific function.\n     *\n     * @param {AuthorizationOptions} options - The options for building the `Authorization`\n     * @returns {Promise<Authorization>} - A promise that resolves to an `Authorization` or throws an Error.\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider.\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a ProgramManager with the key and record providers.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build the `Authorization`.\n     * const authorization = await programManager.buildAuthorization({\n     *   programName: \"credits.aleo\",\n     *   functionName: \"transfer_public\",\n     *   inputs: [\n     *     \"aleo1vwls2ete8dk8uu2kmkmzumd7q38fvshrht8hlc0a5362uq8ftgyqnm3w08\",\n     *     \"10000000u64\",\n     *   ],\n     * });\n     */\n    async buildAuthorization(\n        options: AuthorizationOptions,\n    ): Promise<Authorization> {\n        // Destructure the options object to access the parameters.\n        const {\n            functionName,\n            inputs,\n        } = options;\n\n        const privateKey = options.privateKey;\n        let program = options.programSource;\n        let programName = options.programName;\n        let imports = options.programImports;\n        let edition = options.edition;\n\n        // Ensure the function exists on the network.\n        if (program === undefined) {\n            try {\n                program = <string>(\n                    await this.networkClient.getProgram(programName)\n                );\n            } catch (e: any) {\n                logAndThrow(\n                    `Error finding ${programName}. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`,\n                );\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the program name if it is not provided in the parameters.\n        if (programName === undefined) {\n            programName = Program.fromString(program).id();\n        }\n\n        // Get the private key from the account if it is not provided in the parameters.\n        let executionPrivateKey = privateKey;\n        if (\n            typeof privateKey === \"undefined\" &&\n            typeof this.account !== \"undefined\"\n        ) {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw \"No private key provided and no private key set in the ProgramManager\";\n        }\n\n        if (edition == undefined) {\n            try {\n                edition = await this.networkClient.getLatestProgramEdition(programName);\n            } catch (e: any) {\n                console.warn(`Error finding edition for ${programName}. Network response: '${e.message}'. Assuming edition 1.`);\n                edition = 1;\n            }\n        }\n\n        // Resolve the program imports if they exist.\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>(\n                    await this.networkClient.getProgramImports(programName)\n                );\n            } catch (e: any) {\n                logAndThrow(\n                    `Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`,\n                );\n            }\n        }\n\n        // Build and return an `Authorization` for the desired function.\n        return await WasmProgramManager.authorize(\n            executionPrivateKey,\n            program,\n            functionName,\n            inputs,\n            imports,\n            edition\n        );\n    }\n\n    /**\n     * Builds a SnarkVM `Authorization` for a specific function without building a circuit first. This should be used when fast authorization generation is needed and the invoker is confident inputs are coorect.\n     *\n     * @param {AuthorizationOptions} options - The options for building the `Authorization`\n     * @returns {Promise<Authorization>} - A promise that resolves to an `Authorization` or throws an Error.\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider.\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a ProgramManager with the key and record providers.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build the unchecked `Authorization`.\n     * const authorization = await programManager.buildAuthorizationUnchecked({\n     *   programName: \"credits.aleo\",\n     *   functionName: \"transfer_public\",\n     *   inputs: [\n     *     \"aleo1vwls2ete8dk8uu2kmkmzumd7q38fvshrht8hlc0a5362uq8ftgyqnm3w08\",\n     *     \"10000000u64\",\n     *   ],\n     * });\n     */\n    async buildAuthorizationUnchecked(\n        options: AuthorizationOptions,\n    ): Promise<Authorization> {\n        // Destructure the options object to access the parameters.\n        const {\n            functionName,\n            inputs,\n        } = options;\n\n        const privateKey = options.privateKey;\n        let program = options.programSource;\n        let programName = options.programName;\n        let imports = options.programImports;\n        let edition = options.edition;\n\n        // Ensure the function exists on the network.\n        if (program === undefined) {\n            try {\n                program = <string>(\n                    await this.networkClient.getProgram(programName)\n                );\n            } catch (e: any) {\n                logAndThrow(\n                    `Error finding ${programName}. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`,\n                );\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the program name if it is not provided in the parameters.\n        if (programName === undefined) {\n            programName = Program.fromString(program).id();\n        }\n\n        // Get the private key from the account if it is not provided in the parameters.\n        let executionPrivateKey = privateKey;\n        if (\n            typeof privateKey === \"undefined\" &&\n            typeof this.account !== \"undefined\"\n        ) {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw \"No private key provided and no private key set in the ProgramManager\";\n        }\n\n        // Resolve the program imports if they exist.\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>(\n                    await this.networkClient.getProgramImports(programName)\n                );\n            } catch (e: any) {\n                logAndThrow(\n                    `Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`,\n                );\n            }\n        }\n\n        if (edition == undefined) {\n            try {\n                edition = await this.networkClient.getLatestProgramEdition(programName);\n            } catch (e: any) {\n                console.warn(`Error finding edition for ${programName}. Network response: '${e.message}'. Assuming edition 1.`);\n                edition = 1;\n            }\n        }\n\n        // Build and return an `Authorization` for the desired function.\n        return await WasmProgramManager.buildAuthorizationUnchecked(\n            executionPrivateKey,\n            program,\n            functionName,\n            inputs,\n            imports,\n            edition\n        );\n    }\n\n    /**\n     * Builds a `ProvingRequest` for submission to a prover for execution.\n     *\n     * @param {ProvingRequestOptions} options - The options for building the proving request\n     * @returns {Promise<ProvingRequest>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider.\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a ProgramManager with the key and record providers.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build the proving request.\n     * const provingRequest = await programManager.provingRequest({\n     *   programName: \"credits.aleo\",\n     *   functionName: \"transfer_public\",\n     *   baseFee: 100000,\n     *   priorityFee: 0,\n     *   privateFee: false,\n     *   inputs: [\n     *     \"aleo1vwls2ete8dk8uu2kmkmzumd7q38fvshrht8hlc0a5362uq8ftgyqnm3w08\",\n     *     \"10000000u64\",\n     *   ],\n     *   broadcast: false,\n     * });\n     */\n    async provingRequest(\n        options: ProvingRequestOptions,\n    ): Promise<ProvingRequest> {\n        // Destructure the options object to access the parameters.\n        const {\n            functionName,\n            baseFee,\n            priorityFee,\n            privateFee,\n            inputs,\n            recordSearchParams,\n            broadcast = false,\n            unchecked = false,\n        } = options;\n\n        const privateKey = options.privateKey;\n        let program = options.programSource;\n        let programName = options.programName;\n        let feeRecord = options.feeRecord;\n        let imports = options.programImports;\n        let edition = options.edition;\n\n        // Ensure the function exists on the network.\n        if (program === undefined) {\n            try {\n                program = <string>(\n                    await this.networkClient.getProgram(programName)\n                );\n            } catch (e: any) {\n                logAndThrow(\n                    `Error finding ${programName}. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`,\n                );\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the program name if it is not provided in the parameters.\n        if (programName === undefined) {\n            programName = Program.fromString(program).id();\n        }\n\n        if (edition == undefined) {\n            try {\n                edition = await this.networkClient.getLatestProgramEdition(programName);\n            } catch (e: any) {\n                console.warn(`Error finding edition for ${programName}. Network response: '${e.message}'. Assuming edition 1.`);\n                edition = 1;\n            }\n        }\n\n        // Get the private key from the account if it is not provided in the parameters.\n        let executionPrivateKey = privateKey;\n        if (\n            typeof privateKey === \"undefined\" &&\n            typeof this.account !== \"undefined\"\n        ) {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw \"No private key provided and no private key set in the ProgramManager\";\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters.\n        try {\n            feeRecord = privateFee\n                ? <RecordPlaintext>(\n                    await this.getCreditsRecord(\n                        priorityFee,\n                        [],\n                        feeRecord,\n                        recordSearchParams,\n                    )\n                )\n                : undefined;\n        } catch (e: any) {\n            logAndThrow(\n                `Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`,\n            );\n        }\n\n        // Resolve the program imports if they exist.\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>(\n                    await this.networkClient.getProgramImports(programName)\n                );\n            } catch (e: any) {\n                logAndThrow(\n                    `Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`,\n                );\n            }\n        }\n\n        // Build and return the `ProvingRequest`.\n        return await WasmProgramManager.buildProvingRequest(\n            executionPrivateKey,\n            program,\n            functionName,\n            inputs,\n            baseFee,\n            priorityFee,\n            feeRecord,\n            imports,\n            broadcast,\n            unchecked,\n            edition\n        );\n    }\n\n    /**\n     * Builds a SnarkVM fee `Authorization` for `credits.aleo/fee_private` or `credits.aleo/fee_public`. If a record is provided `fee_private` will be executed, otherwise `fee_public` will be executed.\n     *\n     * @param {FeeAuthorizationOptions} options - The options for building the `Authorization`.\n     * @returns {Promise<Authorization>} - A promise that resolves to an `Authorization` or throws an Error.\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider.\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a ProgramManager with the key and record providers.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build a credits.aleo/fee_public `Authorization`.\n     * const feePublicAuthorization = await programManager.authorizeFee({\n     *   deploymentOrExecutionId: \"2423957656946557501636078245035919227529640894159332581642187482178647335171field\",\n     *   baseFeeCredits: 0.1,\n     * });\n     *\n     * // Build a credits.aleo/fee_private `Authorization`.\n     * const record = \"{ owner: aleo1j7qxyunfldj2lp8hsvy7mw5k8zaqgjfyr72x2gh3x4ewgae8v5gscf5jh3.private, microcredits: 1500000000000000u64.private, _nonce: 3077450429259593211617823051143573281856129402760267155982965992208217472983group.public }\";\n     * const feePrivateAuthorization = await programManager.authorizeFee({\n     *   deploymentOrExecutionId: \"2423957656946557501636078245035919227529640894159332581642187482178647335171field\",\n     *   baseFeeCredits: 0.1,\n     *   feeRecord: record,\n     * });\n     */\n    async buildFeeAuthorization(\n        options: FeeAuthorizationOptions,\n    ): Promise<Authorization> {\n        // Destructure the options object to access the parameters.\n        const {\n            privateKey,\n            deploymentOrExecutionId,\n            baseFeeCredits,\n            priorityFeeCredits,\n            feeRecord,\n        } = options;\n\n        // Get the private key from the account if it is not provided in the parameters.\n        let executionPrivateKey = privateKey;\n        if (\n            typeof privateKey === \"undefined\" &&\n            typeof this.account !== \"undefined\"\n        ) {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw \"No private key provided and no private key set in the ProgramManager\";\n        }\n\n        // Build and return the fee `Authorization`.\n        return await WasmProgramManager.authorizeFee(\n            executionPrivateKey,\n            deploymentOrExecutionId,\n            baseFeeCredits,\n            priorityFeeCredits || 0,\n            feeRecord,\n        );\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<string>} - The transaction id\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const tx_id = await programManager.execute({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   priorityFee: 0.0,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx_id);\n     *  assert(transaction.id() === tx_id);\n     * }, 10000);\n     */\n    async execute(options: ExecuteOptions): Promise<string> {\n        const tx = <Transaction>await this.buildExecutionTransaction(options);\n\n        let feeAddress;\n\n        if (typeof options.privateKey !== \"undefined\") {\n            feeAddress = Address.from_private_key(options.privateKey);\n        } else if (this.account !== undefined) {\n            feeAddress = this.account?.address();\n        } else {\n            throw Error(\n                \"No private key provided and no private key set in the ProgramManager. Please set an account or provide a private key.\",\n            );\n        }\n\n        // Check if the account has sufficient credits to pay for the transaction\n        await this.checkFee(feeAddress.to_string(), tx.feeAmount());\n\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving & verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<ExecutionResponse>} The execution response containing the outputs of the function and the proof if the program is proved.\n     *\n     * @example\n     * /// Import the mainnet version of the sdk used to build executions.\n     * import { Account, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(undefined, undefined, undefined);\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.run(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n        edition?: number\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (\n            typeof privateKey === \"undefined\" &&\n            typeof this.account !== \"undefined\"\n        ) {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw \"No private key provided and no private key set in the ProgramManager\";\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>(\n                    await this.keyProvider.functionKeys(keySearchParams)\n                );\n            } catch (e) {\n                console.log(\n                    `Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`,\n                );\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\");\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(\n            executionPrivateKey,\n            program,\n            function_name,\n            inputs,\n            proveExecution,\n            false,\n            imports,\n            provingKey,\n            verifyingKey,\n            this.host,\n            offlineQuery,\n            edition\n        );\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} priorityFee The optional priority fee to be paid for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const record_1 = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const record_2 = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 1540945439182663264862696551825005342995406165131907382295858612069623286213group.public}\"\n     * const tx_id = await programManager.join(record_1, record_2, 0.05, false);\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx_id);\n     *  assert(transaction.id() === tx_id);\n     * }, 10000);\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        priorityFee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters and assign the fee address\n        let executionPrivateKey = privateKey;\n        let feeAddress;\n        if (\n            typeof privateKey === \"undefined\" &&\n            typeof this.account !== \"undefined\"\n        ) {\n            executionPrivateKey = this.account.privateKey();\n            feeAddress = this.account?.address();\n        }\n        else if (typeof executionPrivateKey === \"undefined\") {\n            throw \"No private key provided and no private key set in the ProgramManager\";\n        }\n        else {\n            feeAddress = Address.from_private_key(executionPrivateKey);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys;\n        try {\n            feeKeys = privateFee\n                ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys()\n                : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e: any) {\n            logAndThrow(\n                `Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`,\n            );\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee\n                ? <RecordPlaintext>(\n                    await this.getCreditsRecord(\n                        priorityFee,\n                        [],\n                        feeRecord,\n                        recordSearchParams,\n                    )\n                )\n                : undefined;\n        } catch (e: any) {\n            logAndThrow(\n                `Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`,\n            );\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne =\n                recordOne instanceof RecordPlaintext\n                    ? recordOne\n                    : RecordPlaintext.fromString(recordOne);\n            recordTwo =\n                recordTwo instanceof RecordPlaintext\n                    ? recordTwo\n                    : RecordPlaintext.fromString(recordTwo);\n        } catch (e: any) {\n            logAndThrow(\n                \"Records provided are not valid. Please ensure they are valid plaintext records.\",\n            );\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(\n            executionPrivateKey,\n            recordOne,\n            recordTwo,\n            priorityFee,\n            feeRecord,\n            this.host,\n            joinProvingKey,\n            joinVerifyingKey,\n            feeProvingKey,\n            feeVerifyingKey,\n            offlineQuery,\n        );\n\n        // Check if the account has sufficient credits to pay for the transaction\n        await this.checkFee(feeAddress.to_string(), tx.feeAmount());\n\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx_id);\n     *  assert(transaction.id() === tx_id);\n     * }, 10000);\n     */\n    async split(\n        splitAmount: number,\n        amountRecord: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (\n            typeof privateKey === \"undefined\" &&\n            typeof this.account !== \"undefined\"\n        ) {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw \"No private key provided and no private key set in the ProgramManager\";\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e: any) {\n            logAndThrow(\n                `Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`,\n            );\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord =\n                amountRecord instanceof RecordPlaintext\n                    ? amountRecord\n                    : RecordPlaintext.fromString(amountRecord);\n        } catch (e: any) {\n            logAndThrow(\n                \"Record provided is not valid. Please ensure it is a valid plaintext record.\",\n            );\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(\n            executionPrivateKey,\n            splitAmount,\n            amountRecord,\n            this.host,\n            splitProvingKey,\n            splitVerifyingKey,\n            offlineQuery,\n        );\n\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports,\n            );\n            return [\n                <ProvingKey>keyPair.provingKey(),\n                <VerifyingKey>keyPair.verifyingKey(),\n            ];\n        } catch (e: any) {\n            logAndThrow(\n                `Could not synthesize keys - error ${e.message}. Please ensure the program is valid and the inputs are correct.`,\n            );\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} priorityFee The optional priority fee to be paid for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<Transaction>} The transaction object\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const tx = await programManager.buildTransferTransaction(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"public\", 0.2, false);\n     * await programManager.networkClient.submitTransaction(tx.toString());\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx.id());\n     *  assert(transaction.id() === tx.id());\n     * }, 10000);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        priorityFee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<Transaction> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (\n            typeof executionPrivateKey === \"undefined\" &&\n            typeof this.account !== \"undefined\"\n        ) {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw \"No private key provided and no private key set in the ProgramManager\";\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys;\n        try {\n            feeKeys = privateFee\n                ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys()\n                : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>(\n                await this.keyProvider.transferKeys(transferType)\n            );\n        } catch (e: any) {\n            logAndThrow(\n                `Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`,\n            );\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>(\n                    await this.getCreditsRecord(\n                        priorityFee,\n                        [],\n                        amountRecord,\n                        recordSearchParams,\n                    )\n                );\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee\n                ? <RecordPlaintext>(\n                    await this.getCreditsRecord(\n                        priorityFee,\n                        nonces,\n                        feeRecord,\n                        recordSearchParams,\n                    )\n                )\n                : undefined;\n        } catch (e: any) {\n            logAndThrow(\n                `Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`,\n            );\n        }\n\n        // Build an execution transaction\n        return await WasmProgramManager.buildTransferTransaction(\n            executionPrivateKey,\n            amount,\n            recipient,\n            transferType,\n            amountRecord,\n            priorityFee,\n            feeRecord,\n            this.host,\n            transferProvingKey,\n            transferVerifyingKey,\n            feeProvingKey,\n            feeVerifyingKey,\n            offlineQuery,\n        );\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {number} priorityFee The optional priority fee to be paid for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<Transaction>} The transaction object\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const tx = await programManager.buildTransferPublicTransaction(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 0.2);\n     * await programManager.networkClient.submitTransaction(tx.toString());\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx.id());\n     *  assert(transaction.id() === tx.id());\n     * }, 10000);\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        recipient: string,\n        priorityFee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(\n            amount,\n            recipient,\n            \"public\",\n            priorityFee,\n            false,\n            undefined,\n            undefined,\n            undefined,\n            privateKey,\n            offlineQuery,\n        );\n    }\n\n    /**\n     * Build a transfer_public_as_signer transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {number} priorityFee The optional priority fee to be paid for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<Transaction>} The transaction object\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const tx = await programManager.buildTransferPublicAsSignerTransaction(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", 0.2);\n     * await programManager.networkClient.submitTransaction(tx.toString());\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx.id());\n     *  assert(transaction.id() === tx.id());\n     * }, 10000);\n     */\n    async buildTransferPublicAsSignerTransaction(\n        amount: number,\n        recipient: string,\n        priorityFee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(\n            amount,\n            recipient,\n            \"public\",\n            priorityFee,\n            false,\n            undefined,\n            undefined,\n            undefined,\n            privateKey,\n            offlineQuery,\n        );\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} priorityFee The optional priority fee to be paid for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id\n     *\n     * @example\n     * /// Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager, NetworkRecordProvider } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     * keyProvider.useCache(true);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"public\", 0.2, false);\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx_id);\n     *  assert(transaction.id() === tx_id);\n     * }, 10000);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        priorityFee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string> {\n        const tx = <Transaction>(\n            await this.buildTransferTransaction(\n                amount,\n                recipient,\n                transferType,\n                priorityFee,\n                privateFee,\n                recordSearchParams,\n                amountRecord,\n                feeRecord,\n                privateKey,\n                offlineQuery,\n            )\n        );\n\n        let feeAddress;\n\n        if (typeof privateKey !== \"undefined\") {\n            feeAddress = Address.from_private_key(privateKey);\n        } else if (this.account !== undefined) {\n            feeAddress = this.account?.address();\n        } else {\n            throw Error(\n                \"No private key provided and no private key set in the ProgramManager. Please set an account or provide a private key.\",\n            );\n        }\n\n        // Check if the account has sufficient credits to pay for the transaction\n        await this.checkFee(feeAddress.to_string(), tx.feeAmount());\n\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a validator for later submission to the Aleo Network\n     *\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing validator and is different from the address of the executor of this function, it will bond the credits to that validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} The transaction object\n     *\n     * @example\n     * // Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache(true);\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction object for later submission\n     * const tx = await programManager.buildBondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * // The transaction can be later submitted to the network using the network client.\n     * await programManager.networkClient.submitTransaction(tx.toString());\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx.id());\n     *  assert(transaction.id() === tx.id());\n     * }, 10000);\n     */\n    async buildBondPublicTransaction(\n        validator_address: string,\n        withdrawal_address: string,\n        amount: number,\n        options: Partial<ExecuteOptions> = {},\n    ) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            priorityFee = options.priorityFee || 0,\n            privateFee = false,\n            inputs = [\n                validator_address,\n                withdrawal_address,\n                `${scaledAmount.toString()}u64`,\n            ],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                cacheKey: \"credits.aleo/bond_public\",\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            priorityFee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions,\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Bond credits to validator.\n     *\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the signer (i.e. the executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing validator and is different from the address of the executor of this function, it will bond the credits to that validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     * @returns {Promise<string>} The transaction id\n     *\n     * @example\n     * // Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache(true);\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     *\n     * // Create the bonding transaction\n     * tx_id = await programManager.bondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx_id);\n     *  assert(transaction.id() === tx_id);\n     * }, 10000);\n     */\n    async bondPublic(\n        validator_address: string,\n        withdrawal_address: string,\n        amount: number,\n        options: Partial<ExecuteOptions> = {},\n    ) {\n        const tx = <Transaction>(\n            await this.buildBondPublicTransaction(\n                validator_address,\n                withdrawal_address,\n                amount,\n                options,\n            )\n        );\n\n        let feeAddress;\n\n        if (typeof options.privateKey !== \"undefined\") {\n            feeAddress = Address.from_private_key(options.privateKey);\n        } else if (this.account !== undefined) {\n            feeAddress = this.account?.address();\n        } else {\n            throw Error(\n                \"No private key provided and no private key set in the ProgramManager. Please set an account or provide a private key.\",\n            );\n        }\n\n        // Check if the account has sufficient credits to pay for the transaction\n        await this.checkFee(feeAddress.to_string(), tx.feeAmount());\n\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a bond_validator transaction for later submission to the Aleo Network.\n     *\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the executor of this function), it will attempt to bond the credits as a validator. If the address is specified is an existing validator and is different from the address of the executor of this function, it will bond the credits to that validator's staking committee as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond. A minimum of 10000 credits is required to bond as a delegator.\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} The transaction object\n     *\n     * @example\n     * // Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache(true);\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bond validator transaction object for later use.\n     * const tx = await programManager.buildBondValidatorTransaction(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * // The transaction can later be submitted to the network using the network client.\n     * const tx_id = await programManager.networkClient.submitTransaction(tx.toString());\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx_id);\n     *  assert(transaction.id() === tx_id);\n     * }, 10000);\n     */\n    async buildBondValidatorTransaction(\n        validator_address: string,\n        withdrawal_address: string,\n        amount: number,\n        commission: number,\n        options: Partial<ExecuteOptions> = {},\n    ) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const adjustedCommission = Math.trunc(commission);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_validator\",\n            priorityFee = options.priorityFee || 0,\n            privateFee = false,\n            inputs = [\n                validator_address,\n                withdrawal_address,\n                `${scaledAmount.toString()}u64`,\n                `${adjustedCommission.toString()}u8`,\n            ],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_validator.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_validator.verifier,\n                cacheKey: \"credits.aleo/bond_validator\",\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            priorityFee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions,\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Build transaction to bond a validator.\n     *\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing validator and is different from the address of the executor of this function, it will bond the credits to that validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<string>} The transaction id\n     *\n     * @example\n     * // Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache(true);\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondValidator(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx_id);\n     *  assert(transaction.id() === tx_id);\n     * }, 10000);\n     */\n    async bondValidator(\n        validator_address: string,\n        withdrawal_address: string,\n        amount: number,\n        commission: number,\n        options: Partial<ExecuteOptions> = {},\n    ) {\n        const tx = <Transaction>(\n            await this.buildBondValidatorTransaction(\n                validator_address,\n                withdrawal_address,\n                amount,\n                commission,\n                options,\n            )\n        );\n\n        let feeAddress;\n\n        if (typeof options.privateKey !== \"undefined\") {\n            feeAddress = Address.from_private_key(options.privateKey);\n        } else if (this.account !== undefined) {\n            feeAddress = this.account?.address();\n        } else {\n            throw Error(\n                \"No private key provided and no private key set in the ProgramManager. Please set an account or provide a private key.\",\n            );\n        }\n\n        // Check if the account has sufficient credits to pay for the transaction\n        await this.checkFee(feeAddress.to_string(), tx.feeAmount());\n\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build an unbond_public execution transaction to unbond credits from a validator in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is unbonding the credits.\n     * @param {number} amount - The amount of credits to unbond (scaled by 1,000,000).\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a keyProvider to handle key management.\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache(true);\n     *\n     * // Create a new ProgramManager with the key that will be used to unbond credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * const tx = await programManager.buildUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 2000000);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx.toString());\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx.id());\n     *  assert(transaction.id() === tx.id());\n     * }, 10000);\n     */\n    async buildUnbondPublicTransaction(\n        staker_address: string,\n        amount: number,\n        options: Partial<ExecuteOptions> = {},\n    ): Promise<Transaction> {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            priorityFee = options.priorityFee || 0,\n            privateFee = false,\n            inputs = [staker_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                cacheKey: \"credits.aleo/unbond_public\",\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            priorityFee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions,\n        };\n\n        return this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits. If the address of the executor of this function is an existing\n     * validator, it will subtract this amount of credits from the validator's staked credits. If there are less than\n     * 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set. If the\n     * address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     *\n     * @param {string} staker_address Address of the staker who is unbonding the credits\n     * @param {number} amount Amount of credits to unbond.\n     * @param {ExecuteOptions} options Options for the execution\n     * @returns {Promise<string>} The transaction id\n     *\n     * @example\n     * // Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache(true);\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the unbond_public transaction and send it to the network\n     * const tx_id = await programManager.unbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 10);\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx_id);\n     *  assert(transaction.id() === tx_id);\n     * }, 10000);\n     */\n    async unbondPublic(\n        staker_address: string,\n        amount: number,\n        options: Partial<ExecuteOptions> = {},\n    ): Promise<string> {\n        const tx = <Transaction>(\n            await this.buildUnbondPublicTransaction(\n                staker_address,\n                amount,\n                options,\n            )\n        );\n\n        let feeAddress;\n\n        if (typeof options.privateKey !== \"undefined\") {\n            feeAddress = Address.from_private_key(options.privateKey);\n        } else if (this.account !== undefined) {\n            feeAddress = this.account?.address();\n        } else {\n            throw Error(\n                \"No private key provided and no private key set in the ProgramManager. Please set an account or provide a private key.\",\n            );\n        }\n\n        // Check if the account has sufficient credits to pay for the transaction\n        await this.checkFee(feeAddress.to_string(), tx.feeAmount());\n\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to claim unbonded public credits in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is claiming the credits.\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache(true);\n     *\n     * // Create a new ProgramManager with the key that will be used to claim unbonded credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     *\n     * // Create the claim_unbond_public transaction object for later use.\n     * const tx = await programManager.buildClaimUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx.toString());\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx.id());\n     *  assert(transaction.id() === tx.id());\n     * }, 10000);\n     */\n    async buildClaimUnbondPublicTransaction(\n        staker_address: string,\n        options: Partial<ExecuteOptions> = {},\n    ): Promise<Transaction> {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            priorityFee = options.priorityFee || 0,\n            privateFee = false,\n            inputs = [staker_address],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                cacheKey: \"credits.aleo/claim_unbond_public\",\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            priorityFee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions,\n        };\n\n        // Check if the account has sufficient credits to pay for the transaction\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @param {string} staker_address Address of the staker who is claiming the credits\n     * @param {ExecuteOptions} options\n     * @returns {Promise<string>} The transaction id\n     *\n     * @example\n     * // Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache(true);\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the claim_unbond_public transaction\n     * const tx_id = await programManager.claimUnbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx_id);\n     *  assert(transaction.id() === tx_id);\n     * }, 10000);\n     */\n    async claimUnbondPublic(\n        staker_address: string,\n        options: Partial<ExecuteOptions> = {},\n    ): Promise<string> {\n        const tx = <Transaction>(\n            await this.buildClaimUnbondPublicTransaction(\n                staker_address,\n                options,\n            )\n        );\n\n        let feeAddress;\n\n        if (typeof options.privateKey !== \"undefined\") {\n            feeAddress = Address.from_private_key(options.privateKey);\n        } else if (this.account !== undefined) {\n            feeAddress = this.account?.address();\n        } else {\n            throw Error(\n                \"No private key provided and no private key set in the ProgramManager. Please set an account or provide a private key.\",\n            );\n        }\n\n        // Check if the account has sufficient credits to pay for the transaction\n        await this.checkFee(feeAddress.to_string(), tx.feeAmount());\n\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a set_validator_state transaction for later usage.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     * @returns {Promise<Transaction>} The transaction object\n     *\n     * @example\n     * // Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache(true);\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     *\n     * // Create the set_validator_state transaction\n     * const tx = await programManager.buildSetValidatorStateTransaction(true);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx.toString());\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx.id());\n     *  assert(transaction.id() === tx.id());\n     * }, 10000);\n     */\n    async buildSetValidatorStateTransaction(\n        validator_state: boolean,\n        options: Partial<ExecuteOptions> = {},\n    ): Promise<Transaction> {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            priorityFee = 0,\n            privateFee = false,\n            inputs = [validator_state.toString()],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                cacheKey: \"credits.aleo/set_validator_state\",\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            priorityFee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions,\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Submit a set_validator_state transaction to the Aleo Network.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     * @returns {Promise<string>} The transaction id\n     *\n     * @example\n     * // Import the mainnet version of the sdk.\n     * import { AleoKeyProvider, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache(true);\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     *\n     * // Create the set_validator_state transaction\n     * const tx_id = await programManager.setValidatorState(true);\n     *\n     * // Verify the transaction was successful\n     * setTimeout(async () => {\n     *  const transaction = await programManager.networkClient.getTransaction(tx_id);\n     *  assert(transaction.id() === tx_id);\n     * }, 10000);\n     */\n    async setValidatorState(\n        validator_state: boolean,\n        options: Partial<ExecuteOptions> = {},\n    ) {\n        const tx = <Transaction>(\n            await this.buildSetValidatorStateTransaction(\n                validator_state,\n                options,\n            )\n        );\n\n        let feeAddress;\n\n        if (typeof options.privateKey !== \"undefined\") {\n            feeAddress = Address.from_private_key(options.privateKey);\n        } else if (this.account !== undefined) {\n            feeAddress = this.account?.address();\n        } else {\n            throw Error(\n                \"No private key provided and no private key set in the ProgramManager. Please set an account or provide a private key.\",\n            );\n        }\n\n        // Check if the account has sufficient credits to pay for the transaction\n        await this.checkFee(feeAddress.to_string(), tx.feeAmount());\n\n        return this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Verify a proof from an offline execution. This is useful when it is desired to do offchain proving and verification.\n     *\n     * @param {executionResponse} executionResponse The response from an offline function execution (via the `programManager.run` method)\n     * @param {blockHeight} blockHeight The ledger height when the execution was generated.\n     * @param {ImportedPrograms} imports The imported programs used in the execution. Specified as { \"programName\": \"programSourceCode\", ... }\n     * @param {ImportedVerifyingKeys} importedVerifyingKeys The verifying keys in the execution. Specified as { \"programName\": [[\"functionName\", \"verifyingKey\"], ...], ... }\n     * @returns {boolean} True if the proof is valid, false otherwise\n     *\n     * @example\n     * /// Import the mainnet version of the sdk used to build executions.\n     * import { Account, ProgramManager } from \"@provablehq/sdk/mainnet.js\";\n     *\n     * /// Create the source for two programs.\n     * const program = \"import add_it_up.aleo; \\n\\n program mul_add.aleo;\\n\\nfunction mul_and_add:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n call add_it_up.aleo/add_it r1 r2 into r3;  output r3 as u32.private;\\n\";\n     * const program_import = \"program add_it_up.aleo;\\n\\nfunction add_it:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(undefined, undefined, undefined);\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = Account.fromCipherText(process.env.ciphertext, process.env.password);\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.run(program, \"mul_and_add\", [\"5u32\", \"5u32\"], true);\n     *\n     * /// Construct the imports and verifying keys\n     * const imports = { \"add_it_up.aleo\": program_import };\n     * const importedVerifyingKeys = { \"add_it_up.aleo\": [[\"add_it\", \"verifyingKey1...\"]] };\n     *\n     * /// Verify the execution.\n     * const blockHeight = 9000000;\n     * const isValid = programManager.verifyExecution(executionResponse, blockHeight, imports, importedVerifyingKeys);\n     * assert(isValid);\n     */\n    verifyExecution(executionResponse: ExecutionResponse, blockHeight: number, imports?: ImportedPrograms, importedVerifyingKeys?: ImportedVerifyingKeys): boolean {\n        try {\n            const execution = <FunctionExecution>(\n                executionResponse.getExecution()\n            );\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(\n                execution,\n                verifyingKey,\n                program,\n                function_id,\n                imports,\n                importedVerifyingKeys,\n                blockHeight\n            );\n        } catch (e) {\n            console.warn(\n                `The execution was not found in the response, cannot verify the execution: ${e}`,\n            );\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program} The program object\n     */\n    createProgramFromSource(program: string): Program {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(\n        amount: number,\n        nonces: string[],\n        record?: RecordPlaintext | string,\n        params?: RecordSearchParams,\n    ): Promise<RecordPlaintext> {\n        try {\n            return record instanceof RecordPlaintext\n                ? record\n                : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(\n                    await recordProvider.findCreditsRecord(\n                        amount,\n                        true,\n                        nonces,\n                        params,\n                    )\n                );\n            } catch (e: any) {\n                logAndThrow(\n                    `Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`,\n                );\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string {\n    return VALID_TRANSFER_TYPES.has(transferType)\n        ? transferType\n        : logAndThrow(\n            `Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`,\n        );\n}\n\nexport { ProgramManager, AuthorizationOptions, FeeAuthorizationOptions, ExecuteOptions, ProvingRequestOptions };\n","import \"./polyfill/shared.js\";\n\nimport { Account } from \"./account.js\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client.js\";\nimport { BlockJSON, Header, Metadata } from \"./models/blockJSON.js\";\nimport { ConfirmedTransactionJSON } from \"./models/confirmed_transaction.js\";\nimport { DeploymentJSON, VerifyingKeys } from \"./models/deployment/deploymentJSON.js\";\nimport { DeploymentObject } from \"./models/deployment/deploymentObject.js\";\nimport { ExecutionJSON, FeeExecutionJSON } from \"./models/execution/executionJSON.js\";\nimport { ExecutionObject, FeeExecutionObject } from \"./models/execution/executionObject.js\";\nimport { FinalizeJSON } from \"./models/finalizeJSON.js\";\nimport { FunctionObject } from \"./models/functionObject.js\";\nimport { ImportedVerifyingKeys, ImportedPrograms } from \"./models/imports.js\";\nimport { InputJSON } from \"./models/input/inputJSON.js\";\nimport { InputObject } from \"./models/input/inputObject.js\";\nimport { OutputJSON } from \"./models/output/outputJSON.js\";\nimport { OutputObject } from \"./models/output/outputObject.js\";\nimport { OwnerJSON } from \"./models/owner/ownerJSON.js\";\nimport { PlaintextArray} from \"./models/plaintext/array.js\";\nimport { PlaintextLiteral} from \"./models/plaintext/literal.js\";\nimport { PlaintextObject } from \"./models/plaintext/plaintext.js\";\nimport { PlaintextStruct} from \"./models/plaintext/struct.js\";\nimport { ProvingRequestJSON } from \"./models/provingRequest.js\";\nimport { ProvingResponse } from \"./models/provingResponse.js\";\nimport { RatificationJSON } from \"./models/ratification.js\";\nimport { SolutionsJSON, SolutionJSON, PartialSolutionJSON } from \"./models/solution.js\";\nimport { TransactionJSON } from \"./models/transaction/transactionJSON.js\";\nimport { TransactionObject } from \"./models/transaction/transactionObject.js\";\nimport { TransitionJSON } from \"./models/transition/transitionJSON.js\";\nimport { TransitionObject } from \"./models/transition/transitionObject.js\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider.js\";\nimport {\n    OfflineKeyProvider,\n    OfflineSearchParams\n} from \"./offline-key-provider.js\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider.js\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { ProgramManager, ProvingRequestOptions, ExecuteOptions, FeeAuthorizationOptions, AuthorizationOptions } from \"./program-manager.js\";\n\nexport { logAndThrow } from \"./utils.js\";\n\nexport {\n    Address,\n    Authorization,\n    Boolean,\n    BHP256,\n    BHP512,\n    BHP768,\n    BHP1024,\n    Ciphertext,\n    ComputeKey,\n    Execution as FunctionExecution,\n    ExecutionRequest,\n    ExecutionResponse,\n    EncryptionToolkit,\n    Field,\n    GraphKey,\n    Group,\n    I8,\n    I16,\n    I32,\n    I64,\n    I128,\n    OfflineQuery,\n    Pedersen64,\n    Pedersen128,\n    Plaintext,\n    Poseidon2,\n    Poseidon4,\n    Poseidon8,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager as ProgramManagerBase,\n    ProvingKey,\n    ProvingRequest,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    Scalar,\n    Transaction,\n    Transition,\n    U8,\n    U16,\n    U32,\n    U64,\n    U128,\n    VerifyingKey,\n    ViewKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"./wasm.js\";\n\nexport { initializeWasm };\n\nexport {\n    Key,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n} from \"./constants.js\";\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    BlockJSON,\n    BlockHeightSearch,\n    CachedKeyPair,\n    ConfirmedTransactionJSON,\n    DeploymentJSON,\n    DeploymentObject,\n    ExecutionJSON,\n    ExecutionObject,\n    FeeExecutionJSON,\n    FeeExecutionObject,\n    FinalizeJSON,\n    FunctionObject,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Header,\n    ImportedPrograms,\n    ImportedVerifyingKeys,\n    InputJSON,\n    InputObject,\n    KeySearchParams,\n    Metadata,\n    NetworkRecordProvider,\n    OfflineKeyProvider,\n    OfflineSearchParams,\n    OutputJSON,\n    OutputObject,\n    OwnerJSON,\n    PartialSolutionJSON,\n    PlaintextArray,\n    PlaintextLiteral,\n    PlaintextObject,\n    PlaintextStruct,\n    ProgramImports,\n    ProvingRequestJSON,\n    ProvingResponse,\n    RatificationJSON,\n    RecordProvider,\n    RecordSearchParams,\n    SolutionJSON,\n    SolutionsJSON,\n    TransactionJSON,\n    TransactionObject,\n    TransitionJSON,\n    TransitionObject,\n    VerifyingKeys,\n};\n"],"names":["WasmProgramManager"],"mappings":"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"}